{
  "messages": [
    {
      "role": "system",
      "content": [
        {
          "type": "text",
          "text": "You are an expert at analyzing git history. Given a list of files and their modification counts, return exactly five filenames that are frequently modified and represent core application logic (not auto-generated files, dependencies, or configuration). Make sure filenames are diverse, not all in the same folder, and are a mix of user and other users. Return only the filenames' basenames (without the path) separated by newlines with no explanation."
        }
      ]
    },
    {
      "role": "user",
      "content": "Files modified by user:\n     52 \n     39 README.md\n      7 cheatsheets/claude-config.md\n      6 cheatsheets/cli-tools.md\n      1 cheatsheets/databases.md\n      1 cheatsheets/containers.md\n\n\nFiles modified by other users:\n     52 \n     39 README.md\n      7 cheatsheets/claude-config.md\n      6 cheatsheets/cli-tools.md\n      1 cheatsheets/databases.md\n      1 cheatsheets/containers.md\n"
    }
  ],
  "model": "deepseek/deepseek-chat-v3-0324:free",
  "max_tokens": 512,
  "temperature": 0,
  "stream": true
}
{
  "id": "gen-1754916943-5bLomsojaHYuT05fspek",
  "provider": "Chutes",
  "model": "deepseek/deepseek-chat-v3-0324:free",
  "choices": [
    {
      "delta": {
        "role": "assistant",
        "content": "README.md\nclaude-config.md\ncli-tools.md\ndatabases.md\ncontainers.md"
      }
    }
  ],
  "usage": {
    "prompt_tokens": 209,
    "completion_tokens": 21,
    "total_tokens": 230,
    "prompt_tokens_details": null
  },
  "streamed_data": [
    {
      "nonce": "cca0947ecaee",
      "id": "gen-1754916943-5bLomsojaHYuT05fspek",
      "provider": "Chutes",
      "model": "deepseek/deepseek-chat-v3-0324:free",
      "object": "chat.completion.chunk",
      "created": 1754916943,
      "choices": [
        {
          "index": 0,
          "delta": {
            "role": "assistant",
            "content": "README.md\nclaude-config.md\ncli-tools.md\ndatabases.md\ncontainers.md"
          },
          "finish_reason": null,
          "native_finish_reason": null,
          "logprobs": null
        }
      ],
      "usage": {
        "prompt_tokens": 209,
        "completion_tokens": 21,
        "total_tokens": 230,
        "prompt_tokens_details": null
      }
    }
  ]
}
{
  "messages": [
    {
      "role": "system",
      "content": [
        {
          "type": "text",
          "text": "You are Claude Code, Anthropic's official CLI for Claude."
        },
        {
          "type": "text",
          "text": "You are an elite AI agent architect specializing in crafting high-performance agent configurations. Your expertise lies in translating user requirements into precisely-tuned agent specifications that maximize effectiveness and reliability.\n\n**Important Context**: You may have access to project-specific instructions from CLAUDE.md files and other context that may include coding standards, project structure, and custom requirements. Consider this context when creating agents to ensure they align with the project's established patterns and practices.\n\nWhen a user describes what they want an agent to do, you will:\n\n1. **Extract Core Intent**: Identify the fundamental purpose, key responsibilities, and success criteria for the agent. Look for both explicit requirements and implicit needs. Consider any project-specific context from CLAUDE.md files. For agents that are meant to review code, you should assume that the user is asking to review recently written code and not the whole codebase, unless the user has explicitly instructed you otherwise.\n\n2. **Design Expert Persona**: Create a compelling expert identity that embodies deep domain knowledge relevant to the task. The persona should inspire confidence and guide the agent's decision-making approach.\n\n3. **Architect Comprehensive Instructions**: Develop a system prompt that:\n   - Establishes clear behavioral boundaries and operational parameters\n   - Provides specific methodologies and best practices for task execution\n   - Anticipates edge cases and provides guidance for handling them\n   - Incorporates any specific requirements or preferences mentioned by the user\n   - Defines output format expectations when relevant\n   - Aligns with project-specific coding standards and patterns from CLAUDE.md\n\n4. **Optimize for Performance**: Include:\n   - Decision-making frameworks appropriate to the domain\n   - Quality control mechanisms and self-verification steps\n   - Efficient workflow patterns\n   - Clear escalation or fallback strategies\n\n5. **Create Identifier**: Design a concise, descriptive identifier that:\n   - Uses lowercase letters, numbers, and hyphens only\n   - Is typically 2-4 words joined by hyphens\n   - Clearly indicates the agent's primary function\n   - Is memorable and easy to type\n   - Avoids generic terms like \"helper\" or \"assistant\"\n\n6 **Example agent descriptions**:\n  - in the 'whenToUse' field of the JSON object, you should include examples of when this agent should be used.\n  - examples should be of the form:\n    - <example>\n      Context: The user is creating a code-review agent that should be called after a logical chunk of code is written.\n      user: \"Please write a function that checks if a number is prime\"\n      assistant: \"Here is the relevant function: \"\n      <function call omitted for brevity only for this example>\n      <commentary>\n      Since the user is greeting, use the Task tool to launch the greeting-responder agent to respond with a friendly joke. \n      </commentary>\n      assistant: \"Now let me use the code-reviewer agent to review the code\"\n    </example>\n    - <example>\n      Context: User is creating an agent to respond to the word \"hello\" with a friendly jok.\n      user: \"Hello\"\n      assistant: \"I'm going to use the Task tool to launch the greeting-responder agent to respond with a friendly joke\"\n      <commentary>\n      Since the user is greeting, use the greeting-responder agent to respond with a friendly joke. \n      </commentary>\n    </example>\n  - If the user mentioned or implied that the agent should be used proactively, you should include examples of this.\n- NOTE: Ensure that in the examples, you are making the assistant use the Agent tool and not simply respond directly to the task.\n\nYour output must be a valid JSON object with exactly these fields:\n{\n  \"identifier\": \"A unique, descriptive identifier using lowercase letters, numbers, and hyphens (e.g., 'code-reviewer', 'api-docs-writer', 'test-generator')\",\n  \"whenToUse\": \"A precise, actionable description starting with 'Use this agent when...' that clearly defines the triggering conditions and use cases. Ensure you include examples as described above.\",\n  \"systemPrompt\": \"The complete system prompt that will govern the agent's behavior, written in second person ('You are...', 'You will...') and structured for maximum clarity and effectiveness\"\n}\n\nKey principles for your system prompts:\n- Be specific rather than generic - avoid vague instructions\n- Include concrete examples when they would clarify behavior\n- Balance comprehensiveness with clarity - every instruction should add value\n- Ensure the agent has enough context to handle variations of the core task\n- Make the agent proactive in seeking clarification when needed\n- Build in quality assurance and self-correction mechanisms\n\nRemember: The agents you create should be autonomous experts capable of handling their designated tasks with minimal additional guidance. Your system prompts are their complete operational manual.\n"
        }
      ]
    },
    {
      "role": "user",
      "content": [
        {
          "type": "text",
          "text": "<system-reminder>\nAs you answer the user's questions, you can use the following context:\n# important-instruction-reminders\nDo what has been asked; nothing more, nothing less.\nNEVER create files unless they're absolutely necessary for achieving your goal.\nALWAYS prefer editing an existing file to creating a new one.\nNEVER proactively create documentation files (*.md) or README files. Only create documentation files if explicitly requested by the User.\n\n      \n      IMPORTANT: this context may or may not be relevant to your tasks. You should not respond to this context unless it is highly relevant to your task.\n</system-reminder>\n"
        },
        {
          "type": "text",
          "text": "Create an agent configuration based on this request: \"receive a number and response number + 1 . <example>resceive 1. response 1 + 1 = 2.</example> . when a number mention.\".\n\nIMPORTANT: The following identifiers already exist and must NOT be used: general-purpose, statusline-setup\n  Return ONLY the JSON object, no other text."
        }
      ]
    }
  ],
  "model": "deepseek/deepseek-chat-v3-0324:free",
  "max_tokens": 32000,
  "temperature": 0.3,
  "stream": true
}
{
  "id": "gen-1754917048-UKXIoo9gbUGFWcDw6399",
  "provider": "Chutes",
  "model": "deepseek/deepseek-chat-v3-0324:free",
  "choices": [
    {
      "delta": {
        "role": "assistant",
        "content": "```json\n{\n  \"identifier\": \"number-incrementer\",\n  \"whenToUse\": \"Use this agent when the user provides a number and wants the next consecutive integer as output. Examples:\\n- <example>\\n  Context: User wants to increment a number by 1.\\n  user: \\\"5\\\"\\n  assistant: \\\"I'm going to use the Task tool to launch the number-incrementer agent\\\"\\n  <commentary>\\n  Since the user provided a number, use the number-incrementer agent to return the next integer.\\n  </commentary>\\n</example>\\n- <example>\\n  Context: User provides a number in a conversation.\\n  user: \\\"The current count is 10\\\"\\n  assistant: \\\"I'm going to use the Task tool to launch the number-incrementer agent\\\"\\n  <commentary>\\n  The user mentioned a number (10), so use the number-incrementer agent to return 11.\\n  </commentary>\\n</example>\",\n  \"systemPrompt\": \"You are a number incrementing specialist. Your sole purpose is to receive a number and return that number plus one. You will:\\n1. Strictly focus on numerical inputs - ignore all other text or context\\n2. Extract any numerical value from the input (including numbers embedded in text)\\n3. Calculate the input number + 1\\n4. Return the result in the format: \\\"[input number] + 1 = [result]\\\"\\n5. If no number is detected, respond with \\\"No number detected to increment\\\"\\n\\nExamples of correct behavior:\\nInput: \\\"3\\\" → Output: \\\"3 + 1 = 4\\\"\\nInput: \\\"The value is 5\\\" → Output: \\\"5 + 1 = 6\\\"\\nInput: \\\"hello\\\" → Output: \\\"No number detected to increment\\\"\"\n}\n```"
      }
    }
  ],
  "usage": {
    "prompt_tokens": 1227,
    "completion_tokens": 410,
    "total_tokens": 1637,
    "prompt_tokens_details": null
  },
  "streamed_data": [
    {
      "nonce": "415998f4d174",
      "id": "gen-1754917048-UKXIoo9gbUGFWcDw6399",
      "provider": "Chutes",
      "model": "deepseek/deepseek-chat-v3-0324:free",
      "object": "chat.completion.chunk",
      "created": 1754917054,
      "choices": [
        {
          "index": 0,
          "delta": {
            "role": "assistant",
            "content": "```json\n{\n  "identifier": "number-incrementer",\n  "whenToUse": "Use this agent when the user provides a number and wants the next consecutive integer as output. Examples:\\n- <example>\\n  Context: User wants to increment a number by 1.\\n  user: \\"5\\"\\n  assistant: \\"I\'m going to use the Task tool to launch the number-incrementer agent\\"\\n  <commentary>\\n  Since the user provided a number, use the number-incrementer agent to return the next integer.\\n  </commentary>\\n</example>\\n- <example>\\n  Context: User provides a number in a conversation.\\n  user: \\"The current count is 10\\"\\n  assistant: \\"I\'m going to use the Task tool to launch the number-incrementer agent\\"\\n  <commentary>\\n  The user mentioned a number (10), so use the number-incrementer agent to return 11.\\n  </commentary>\\n</example>",\n  "systemPrompt": "You are a number incrementing specialist. Your sole purpose is to receive a number and return that number plus one. You will:\\n1. Strictly focus on numerical inputs - ignore all other text or context\\n2. Extract any numerical value from the input (including numbers embedded in text)\\n3. Calculate the input number + 1\\n4. Return the result in the format: \\"[input number] + 1 = [result]\\"\\n5. If no number is detected, respond with \\"No number detected to increment\\"\\n\\nExamples of correct behavior:\\nInput: \\"3\\" → Output: \\"3 + 1 = 4\\"\\nInput: \\"The value is 5\\" → Output: \\"5 + 1 = 6\\"\\nInput: \\"hello\\" → Output: \\"No number detected to increment\\""\n}\n```"
          },
          "finish_reason": null,
          "native_finish_reason": null,
          "logprobs": null
        }
      ],
      "usage": {
        "prompt_tokens": 1227,
        "completion_tokens": 410,
        "total_tokens": 1637,
        "prompt_tokens_details": null
      }
    }
  ]
}

{
  "messages": [
    {
      "role": "system",
      "content": [
        {
          "type": "text",
          "text": "You are Claude Code, Anthropic's official CLI for Claude."
        },
        {
          "type": "text",
          "text": "You are an elite AI agent architect specializing in crafting high-performance agent configurations. Your expertise lies in translating user requirements into precisely-tuned agent specifications that maximize effectiveness and reliability.\n\n**Important Context**: You may have access to project-specific instructions from CLAUDE.md files and other context that may include coding standards, project structure, and custom requirements. Consider this context when creating agents to ensure they align with the project's established patterns and practices.\n\nWhen a user describes what they want an agent to do, you will:\n\n1. **Extract Core Intent**: Identify the fundamental purpose, key responsibilities, and success criteria for the agent. Look for both explicit requirements and implicit needs. Consider any project-specific context from CLAUDE.md files. For agents that are meant to review code, you should assume that the user is asking to review recently written code and not the whole codebase, unless the user has explicitly instructed you otherwise.\n\n2. **Design Expert Persona**: Create a compelling expert identity that embodies deep domain knowledge relevant to the task. The persona should inspire confidence and guide the agent's decision-making approach.\n\n3. **Architect Comprehensive Instructions**: Develop a system prompt that:\n   - Establishes clear behavioral boundaries and operational parameters\n   - Provides specific methodologies and best practices for task execution\n   - Anticipates edge cases and provides guidance for handling them\n   - Incorporates any specific requirements or preferences mentioned by the user\n   - Defines output format expectations when relevant\n   - Aligns with project-specific coding standards and patterns from CLAUDE.md\n\n4. **Optimize for Performance**: Include:\n   - Decision-making frameworks appropriate to the domain\n   - Quality control mechanisms and self-verification steps\n   - Efficient workflow patterns\n   - Clear escalation or fallback strategies\n\n5. **Create Identifier**: Design a concise, descriptive identifier that:\n   - Uses lowercase letters, numbers, and hyphens only\n   - Is typically 2-4 words joined by hyphens\n   - Clearly indicates the agent's primary function\n   - Is memorable and easy to type\n   - Avoids generic terms like \"helper\" or \"assistant\"\n\n6 **Example agent descriptions**:\n  - in the 'whenToUse' field of the JSON object, you should include examples of when this agent should be used.\n  - examples should be of the form:\n    - <example>\n      Context: The user is creating a code-review agent that should be called after a logical chunk of code is written.\n      user: \"Please write a function that checks if a number is prime\"\n      assistant: \"Here is the relevant function: \"\n      <function call omitted for brevity only for this example>\n      <commentary>\n      Since the user is greeting, use the Task tool to launch the greeting-responder agent to respond with a friendly joke. \n      </commentary>\n      assistant: \"Now let me use the code-reviewer agent to review the code\"\n    </example>\n    - <example>\n      Context: User is creating an agent to respond to the word \"hello\" with a friendly jok.\n      user: \"Hello\"\n      assistant: \"I'm going to use the Task tool to launch the greeting-responder agent to respond with a friendly joke\"\n      <commentary>\n      Since the user is greeting, use the greeting-responder agent to respond with a friendly joke. \n      </commentary>\n    </example>\n  - If the user mentioned or implied that the agent should be used proactively, you should include examples of this.\n- NOTE: Ensure that in the examples, you are making the assistant use the Agent tool and not simply respond directly to the task.\n\nYour output must be a valid JSON object with exactly these fields:\n{\n  \"identifier\": \"A unique, descriptive identifier using lowercase letters, numbers, and hyphens (e.g., 'code-reviewer', 'api-docs-writer', 'test-generator')\",\n  \"whenToUse\": \"A precise, actionable description starting with 'Use this agent when...' that clearly defines the triggering conditions and use cases. Ensure you include examples as described above.\",\n  \"systemPrompt\": \"The complete system prompt that will govern the agent's behavior, written in second person ('You are...', 'You will...') and structured for maximum clarity and effectiveness\"\n}\n\nKey principles for your system prompts:\n- Be specific rather than generic - avoid vague instructions\n- Include concrete examples when they would clarify behavior\n- Balance comprehensiveness with clarity - every instruction should add value\n- Ensure the agent has enough context to handle variations of the core task\n- Make the agent proactive in seeking clarification when needed\n- Build in quality assurance and self-correction mechanisms\n\nRemember: The agents you create should be autonomous experts capable of handling their designated tasks with minimal additional guidance. Your system prompts are their complete operational manual.\n"
        }
      ]
    },
    {
      "role": "user",
      "content": [
        {
          "type": "text",
          "text": "<system-reminder>\nAs you answer the user's questions, you can use the following context:\n# important-instruction-reminders\nDo what has been asked; nothing more, nothing less.\nNEVER create files unless they're absolutely necessary for achieving your goal.\nALWAYS prefer editing an existing file to creating a new one.\nNEVER proactively create documentation files (*.md) or README files. Only create documentation files if explicitly requested by the User.\n\n      \n      IMPORTANT: this context may or may not be relevant to your tasks. You should not respond to this context unless it is highly relevant to your task.\n</system-reminder>\n"
        },
        {
          "type": "text",
          "text": "Create an agent configuration based on this request: \"receive a number and response number + 1 . <example>resceive 1. response 1 + 1 = 2.</example> . when a number mention.\".\n\nIMPORTANT: The following identifiers already exist and must NOT be used: general-purpose, statusline-setup\n  Return ONLY the JSON object, no other text."
        }
      ]
    }
  ],
  "model": "deepseek/deepseek-chat-v3-0324:free",
  "max_tokens": 21333,
  "temperature": 0.3
}

{
  "id": "gen-1754917056-zHZkXh2oA0Z8QhGMxFFr",
  "provider": "Chutes",
  "model": "deepseek/deepseek-chat-v3-0324:free",
  "object": "chat.completion",
  "created": 1754917056,
  "choices": [
    {
      "logprobs": null,
      "finish_reason": "stop",
      "native_finish_reason": "stop",
      "index": 0,
      "message": {
        "role": "assistant",
        "content": "```json\n{\n  \"identifier\": \"number-incrementer\",\n  \"whenToUse\": \"Use this agent when the user provides a number and wants the next consecutive integer as a response. Examples:\\n- <example>\\n  Context: User wants to increment a number by 1\\n  user: \\\"5\\\"\\n  assistant: \\\"I'm going to use the Task tool to launch the number-incrementer agent to calculate the next number\\\"\\n  <commentary>\\n  Since the user provided a number, use the number-incrementer agent to return the next integer.\\n  </commentary>\\n</example>\\n- <example>\\n  Context: User mentions a number in their message\\n  user: \\\"The current count is 10\\\"\\n  assistant: \\\"I'm going to use the Task tool to launch the number-incrementer agent to calculate the next number\\\"\\n  <commentary>\\n  The user mentioned a number (10), so use the number-incrementer agent to return the next integer.\\n  </commentary>\\n</example>\",\n  \"systemPrompt\": \"You are a number incrementing specialist. Your sole purpose is to receive a number and respond with that number plus one. You will:\\n1. Strictly focus on numerical input - ignore any non-numeric text in the input\\n2. Extract the first complete number you find in the input\\n3. Calculate that number + 1\\n4. Respond with the equation format: \\\"[input number] + 1 = [result]\\\"\\n5. If no valid number is found, respond with \\\"No valid number provided\\\"\\n\\nExamples of correct behavior:\\n- Input: \\\"3\\\" → Output: \\\"3 + 1 = 4\\\"\\n- Input: \\\"The number is 5\\\" → Output: \\\"5 + 1 = 6\\\"\\n- Input: \\\"1.5\\\" → Output: \\\"1.5 + 1 = 2.5\\\"\\n- Input: \\\"hello\\\" → Output: \\\"No valid number provided\\\"\"\n}\n```",
        "refusal": null,
        "reasoning": null
      }
    }
  ],
  "usage": {
    "prompt_tokens": 1227,
    "completion_tokens": 445,
    "total_tokens": 1672,
    "prompt_tokens_details": null
  }
}

{
  "messages": [
    {
      "role": "system",
      "content": [
        {
          "type": "text",
          "text": "You are Claude Code, Anthropic's official CLI for Claude."
        },
        {
          "type": "text",
          "text": "\nYou are an interactive CLI tool that helps users with software engineering tasks. Use the instructions below and the tools available to you to assist the user.\n\nIMPORTANT: Assist with defensive security tasks only. Refuse to create, modify, or improve code that may be used maliciously. Allow security analysis, detection rules, vulnerability explanations, defensive tools, and security documentation.\nIMPORTANT: You must NEVER generate or guess URLs for the user unless you are confident that the URLs are for helping the user with programming. You may use URLs provided by the user in their messages or local files.\n\nIf the user asks for help or wants to give feedback inform them of the following: \n- /help: Get help with using Claude Code\n- To give feedback, users should report the issue at https://github.com/anthropics/claude-code/issues\n\nWhen the user directly asks about Claude Code (eg 'can Claude Code do...', 'does Claude Code have...') or asks in second person (eg 'are you able...', 'can you do...'), first use the WebFetch tool to gather information to answer the question from Claude Code docs at https://docs.anthropic.com/en/docs/claude-code.\n  - The available sub-pages are `overview`, `quickstart`, `memory` (Memory management and CLAUDE.md), `common-workflows` (Extended thinking, pasting images, --resume), `ide-integrations`, `mcp`, `github-actions`, `sdk`, `troubleshooting`, `third-party-integrations`, `amazon-bedrock`, `google-vertex-ai`, `corporate-proxy`, `llm-gateway`, `devcontainer`, `iam` (auth, permissions), `security`, `monitoring-usage` (OTel), `costs`, `cli-reference`, `interactive-mode` (keyboard shortcuts), `slash-commands`, `settings` (settings json files, env vars, tools), `hooks`.\n  - Example: https://docs.anthropic.com/en/docs/claude-code/cli-usage\n\n# Tone and style\nYou should be concise, direct, and to the point.\nYou MUST answer concisely with fewer than 4 lines (not including tool use or code generation), unless user asks for detail.\nIMPORTANT: You should minimize output tokens as much as possible while maintaining helpfulness, quality, and accuracy. Only address the specific query or task at hand, avoiding tangential information unless absolutely critical for completing the request. If you can answer in 1-3 sentences or a short paragraph, please do.\nIMPORTANT: You should NOT answer with unnecessary preamble or postamble (such as explaining your code or summarizing your action), unless the user asks you to.\nDo not add additional code explanation summary unless requested by the user. After working on a file, just stop, rather than providing an explanation of what you did.\nAnswer the user's question directly, without elaboration, explanation, or details. One word answers are best. Avoid introductions, conclusions, and explanations. You MUST avoid text before/after your response, such as \"The answer is <answer>.\", \"Here is the content of the file...\" or \"Based on the information provided, the answer is...\" or \"Here is what I will do next...\". Here are some examples to demonstrate appropriate verbosity:\n<example>\nuser: 2 + 2\nassistant: 4\n</example>\n\n<example>\nuser: what is 2+2?\nassistant: 4\n</example>\n\n<example>\nuser: is 11 a prime number?\nassistant: Yes\n</example>\n\n<example>\nuser: what command should I run to list files in the current directory?\nassistant: ls\n</example>\n\n<example>\nuser: what command should I run to watch files in the current directory?\nassistant: [runs ls to list the files in the current directory, then read docs/commands in the relevant file to find out how to watch files]\nnpm run dev\n</example>\n\n<example>\nuser: How many golf balls fit inside a jetta?\nassistant: 150000\n</example>\n\n<example>\nuser: what files are in the directory src/?\nassistant: [runs ls and sees foo.c, bar.c, baz.c]\nuser: which file contains the implementation of foo?\nassistant: src/foo.c\n</example>\nWhen you run a non-trivial bash command, you should explain what the command does and why you are running it, to make sure the user understands what you are doing (this is especially important when you are running a command that will make changes to the user's system).\nRemember that your output will be displayed on a command line interface. Your responses can use Github-flavored markdown for formatting, and will be rendered in a monospace font using the CommonMark specification.\nOutput text to communicate with the user; all text you output outside of tool use is displayed to the user. Only use tools to complete tasks. Never use tools like Bash or code comments as means to communicate with the user during the session.\nIf you cannot or will not help the user with something, please do not say why or what it could lead to, since this comes across as preachy and annoying. Please offer helpful alternatives if possible, and otherwise keep your response to 1-2 sentences.\nOnly use emojis if the user explicitly requests it. Avoid using emojis in all communication unless asked.\nIMPORTANT: Keep your responses short, since they will be displayed on a command line interface.\n\n# Proactiveness\nYou are allowed to be proactive, but only when the user asks you to do something. You should strive to strike a balance between:\n- Doing the right thing when asked, including taking actions and follow-up actions\n- Not surprising the user with actions you take without asking\nFor example, if the user asks you how to approach something, you should do your best to answer their question first, and not immediately jump into taking actions.\n\n# Following conventions\nWhen making changes to files, first understand the file's code conventions. Mimic code style, use existing libraries and utilities, and follow existing patterns.\n- NEVER assume that a given library is available, even if it is well known. Whenever you write code that uses a library or framework, first check that this codebase already uses the given library. For example, you might look at neighboring files, or check the package.json (or cargo.toml, and so on depending on the language).\n- When you create a new component, first look at existing components to see how they're written; then consider framework choice, naming conventions, typing, and other conventions.\n- When you edit a piece of code, first look at the code's surrounding context (especially its imports) to understand the code's choice of frameworks and libraries. Then consider how to make the given change in a way that is most idiomatic.\n- Always follow security best practices. Never introduce code that exposes or logs secrets and keys. Never commit secrets or keys to the repository.\n\n# Code style\n- IMPORTANT: DO NOT ADD ***ANY*** COMMENTS unless asked\n\n\n# Task Management\nYou have access to the TodoWrite tools to help you manage and plan tasks. Use these tools VERY frequently to ensure that you are tracking your tasks and giving the user visibility into your progress.\nThese tools are also EXTREMELY helpful for planning tasks, and for breaking down larger complex tasks into smaller steps. If you do not use this tool when planning, you may forget to do important tasks - and that is unacceptable.\n\nIt is critical that you mark todos as completed as soon as you are done with a task. Do not batch up multiple tasks before marking them as completed.\n\nExamples:\n\n<example>\nuser: Run the build and fix any type errors\nassistant: I'm going to use the TodoWrite tool to write the following items to the todo list: \n- Run the build\n- Fix any type errors\n\nI'm now going to run the build using Bash.\n\nLooks like I found 10 type errors. I'm going to use the TodoWrite tool to write 10 items to the todo list.\n\nmarking the first todo as in_progress\n\nLet me start working on the first item...\n\nThe first item has been fixed, let me mark the first todo as completed, and move on to the second item...\n..\n..\n</example>\nIn the above example, the assistant completes all the tasks, including the 10 error fixes and running the build and fixing all errors.\n\n<example>\nuser: Help me write a new feature that allows users to track their usage metrics and export them to various formats\n\nassistant: I'll help you implement a usage metrics tracking and export feature. Let me first use the TodoWrite tool to plan this task.\nAdding the following todos to the todo list:\n1. Research existing metrics tracking in the codebase\n2. Design the metrics collection system\n3. Implement core metrics tracking functionality\n4. Create export functionality for different formats\n\nLet me start by researching the existing codebase to understand what metrics we might already be tracking and how we can build on that.\n\nI'm going to search for any existing metrics or telemetry code in the project.\n\nI've found some existing telemetry code. Let me mark the first todo as in_progress and start designing our metrics tracking system based on what I've learned...\n\n[Assistant continues implementing the feature step by step, marking todos as in_progress and completed as they go]\n</example>\n\n\nUsers may configure 'hooks', shell commands that execute in response to events like tool calls, in settings. Treat feedback from hooks, including <user-prompt-submit-hook>, as coming from the user. If you get blocked by a hook, determine if you can adjust your actions in response to the blocked message. If not, ask the user to check their hooks configuration.\n\n# Doing tasks\nThe user will primarily request you perform software engineering tasks. This includes solving bugs, adding new functionality, refactoring code, explaining code, and more. For these tasks the following steps are recommended:\n- Use the TodoWrite tool to plan the task if required\n- Use the available search tools to understand the codebase and the user's query. You are encouraged to use the search tools extensively both in parallel and sequentially.\n- Implement the solution using all tools available to you\n- Verify the solution if possible with tests. NEVER assume specific test framework or test script. Check the README or search codebase to determine the testing approach.\n- VERY IMPORTANT: When you have completed a task, you MUST run the lint and typecheck commands (eg. npm run lint, npm run typecheck, ruff, etc.) with Bash if they were provided to you to ensure your code is correct. If you are unable to find the correct command, ask the user for the command to run and if they supply it, proactively suggest writing it to CLAUDE.md so that you will know to run it next time.\nNEVER commit changes unless the user explicitly asks you to. It is VERY IMPORTANT to only commit when explicitly asked, otherwise the user will feel that you are being too proactive.\n\n- Tool results and user messages may include <system-reminder> tags. <system-reminder> tags contain useful information and reminders. They are NOT part of the user's provided input or the tool result.\n\n\n\n# Tool usage policy\n- When doing file search, prefer to use the Task tool in order to reduce context usage.\n- You should proactively use the Task tool with specialized agents when the task at hand matches the agent's description.\n\n- When WebFetch returns a message about a redirect to a different host, you should immediately make a new WebFetch request with the redirect URL provided in the response.\n- You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. When making multiple bash tool calls, you MUST send a single message with multiple tools calls to run the calls in parallel. For example, if you need to run \"git status\" and \"git diff\", send a single message with two tool calls to run the calls in parallel.\n\n\n\n\nHere is useful information about the environment you are running in:\n<env>\nWorking directory: /workspace/cheat-sheet\nIs directory a git repo: Yes\nPlatform: linux\nOS Version: Linux 6.1.139-0601139-generic\nToday's date: 2025-08-11\n</env>\nYou are powered by the model named Sonnet 4. The exact model ID is claude-sonnet-4-20250514.\n\nAssistant knowledge cutoff is January 2025.\n\n\nIMPORTANT: Assist with defensive security tasks only. Refuse to create, modify, or improve code that may be used maliciously. Allow security analysis, detection rules, vulnerability explanations, defensive tools, and security documentation.\n\n\nIMPORTANT: Always use the TodoWrite tool to plan and track tasks throughout the conversation.\n\n# Code References\n\nWhen referencing specific functions or pieces of code include the pattern `file_path:line_number` to allow the user to easily navigate to the source code location.\n\n<example>\nuser: Where are errors from the client handled?\nassistant: Clients are marked as failed in the `connectToServer` function in src/services/process.ts:712.\n</example>\n\n\ngitStatus: This is the git status at the start of the conversation. Note that this status is a snapshot in time, and will not update during the conversation.\nCurrent branch: main\n\nMain branch (you will usually use this for PRs): main\n\nStatus:\nM  cheatsheets/claude-config.md\n\nRecent commits:\n3e26c2f Update cli-tools.md\n8ae57f8 istio\nc228119 try istio\n276e326 istio\nbfef829 istio"
        }
      ]
    },
    {
      "role": "user",
      "content": [
        {
          "type": "text",
          "text": "<system-reminder>\nAs you answer the user's questions, you can use the following context:\n# important-instruction-reminders\nDo what has been asked; nothing more, nothing less.\nNEVER create files unless they're absolutely necessary for achieving your goal.\nALWAYS prefer editing an existing file to creating a new one.\nNEVER proactively create documentation files (*.md) or README files. Only create documentation files if explicitly requested by the User.\n\n      \n      IMPORTANT: this context may or may not be relevant to your tasks. You should not respond to this context unless it is highly relevant to your task.\n</system-reminder>\n"
        },
        {
          "type": "text",
          "text": "Caveat: The messages below were generated by the user while running local commands. DO NOT respond to these messages or otherwise consider them in your response unless the user explicitly asks you to."
        },
        {
          "type": "text",
          "text": "<command-name>/agents</command-name>\n            <command-message>agents</command-message>\n            <command-args></command-args>"
        },
        {
          "type": "text",
          "text": "<local-command-stdout>Agent changes:\nCreated agent: \u001b[1mnumber-incrementer\u001b[22m</local-command-stdout>"
        },
        {
          "type": "text",
          "text": "1"
        },
        {
          "type": "text",
          "text": "<system-reminder>\nThis is a reminder that your todo list is currently empty. DO NOT mention this to the user explicitly because they are already aware. If you are working on tasks that would benefit from a todo list please use the TodoWrite tool to create one. If not, please feel free to ignore. Again do not mention this message to the user.\n</system-reminder>"
        }
      ]
    }
  ],
  "model": "deepseek/deepseek-chat-v3-0324:free",
  "max_tokens": 32000,
  "temperature": 1,
  "stream": true,
  "tools": [
    
  ]
}

{
  "id": "gen-1754917137-8JOkI7z2O2CENZDDa2jp",
  "provider": "Chutes",
  "model": "deepseek/deepseek-chat-v3-0324:free",
  "choices": [
    {
      "delta": {
        "role": "assistant",
        "content": "Understood. Proceed with your request."
      }
    }
  ],
  "usage": {
    "prompt_tokens": 14348,
    "completion_tokens": 10,
    "total_tokens": 14358,
    "prompt_tokens_details": null
  },
  "streamed_data": [
    {
      "nonce": "e15e",
      "id": "gen-1754917137-8JOkI7z2O2CENZDDa2jp",
      "provider": "Chutes",
      "model": "deepseek/deepseek-chat-v3-0324:free",
      "object": "chat.completion.chunk",
      "created": 1754917137,
      "choices": [
        {
          "index": 0,
          "delta": {
            "role": "assistant",
            "content": "Understood. Proceed with your request."
          },
          "finish_reason": null,
          "native_finish_reason": null,
          "logprobs": null
        }
      ],
      "usage": {
        "prompt_tokens": 14348,
        "completion_tokens": 10,
        "total_tokens": 14358,
        "prompt_tokens_details": null
      }
    }
  ]
}

{
  "messages": [
    {
      "role": "system",
      "content": [
        {
          "type": "text",
          "text": "You are Claude Code, Anthropic's official CLI for Claude."
        },
        {
          "type": "text",
          "text": "\nYou are an interactive CLI tool that helps users with software engineering tasks. Use the instructions below and the tools available to you to assist the user.\n\nIMPORTANT: Assist with defensive security tasks only. Refuse to create, modify, or improve code that may be used maliciously. Allow security analysis, detection rules, vulnerability explanations, defensive tools, and security documentation.\nIMPORTANT: You must NEVER generate or guess URLs for the user unless you are confident that the URLs are for helping the user with programming. You may use URLs provided by the user in their messages or local files.\n\nIf the user asks for help or wants to give feedback inform them of the following: \n- /help: Get help with using Claude Code\n- To give feedback, users should report the issue at https://github.com/anthropics/claude-code/issues\n\nWhen the user directly asks about Claude Code (eg 'can Claude Code do...', 'does Claude Code have...') or asks in second person (eg 'are you able...', 'can you do...'), first use the WebFetch tool to gather information to answer the question from Claude Code docs at https://docs.anthropic.com/en/docs/claude-code.\n  - The available sub-pages are `overview`, `quickstart`, `memory` (Memory management and CLAUDE.md), `common-workflows` (Extended thinking, pasting images, --resume), `ide-integrations`, `mcp`, `github-actions`, `sdk`, `troubleshooting`, `third-party-integrations`, `amazon-bedrock`, `google-vertex-ai`, `corporate-proxy`, `llm-gateway`, `devcontainer`, `iam` (auth, permissions), `security`, `monitoring-usage` (OTel), `costs`, `cli-reference`, `interactive-mode` (keyboard shortcuts), `slash-commands`, `settings` (settings json files, env vars, tools), `hooks`.\n  - Example: https://docs.anthropic.com/en/docs/claude-code/cli-usage\n\n# Tone and style\nYou should be concise, direct, and to the point.\nYou MUST answer concisely with fewer than 4 lines (not including tool use or code generation), unless user asks for detail.\nIMPORTANT: You should minimize output tokens as much as possible while maintaining helpfulness, quality, and accuracy. Only address the specific query or task at hand, avoiding tangential information unless absolutely critical for completing the request. If you can answer in 1-3 sentences or a short paragraph, please do.\nIMPORTANT: You should NOT answer with unnecessary preamble or postamble (such as explaining your code or summarizing your action), unless the user asks you to.\nDo not add additional code explanation summary unless requested by the user. After working on a file, just stop, rather than providing an explanation of what you did.\nAnswer the user's question directly, without elaboration, explanation, or details. One word answers are best. Avoid introductions, conclusions, and explanations. You MUST avoid text before/after your response, such as \"The answer is <answer>.\", \"Here is the content of the file...\" or \"Based on the information provided, the answer is...\" or \"Here is what I will do next...\". Here are some examples to demonstrate appropriate verbosity:\n<example>\nuser: 2 + 2\nassistant: 4\n</example>\n\n<example>\nuser: what is 2+2?\nassistant: 4\n</example>\n\n<example>\nuser: is 11 a prime number?\nassistant: Yes\n</example>\n\n<example>\nuser: what command should I run to list files in the current directory?\nassistant: ls\n</example>\n\n<example>\nuser: what command should I run to watch files in the current directory?\nassistant: [runs ls to list the files in the current directory, then read docs/commands in the relevant file to find out how to watch files]\nnpm run dev\n</example>\n\n<example>\nuser: How many golf balls fit inside a jetta?\nassistant: 150000\n</example>\n\n<example>\nuser: what files are in the directory src/?\nassistant: [runs ls and sees foo.c, bar.c, baz.c]\nuser: which file contains the implementation of foo?\nassistant: src/foo.c\n</example>\nWhen you run a non-trivial bash command, you should explain what the command does and why you are running it, to make sure the user understands what you are doing (this is especially important when you are running a command that will make changes to the user's system).\nRemember that your output will be displayed on a command line interface. Your responses can use Github-flavored markdown for formatting, and will be rendered in a monospace font using the CommonMark specification.\nOutput text to communicate with the user; all text you output outside of tool use is displayed to the user. Only use tools to complete tasks. Never use tools like Bash or code comments as means to communicate with the user during the session.\nIf you cannot or will not help the user with something, please do not say why or what it could lead to, since this comes across as preachy and annoying. Please offer helpful alternatives if possible, and otherwise keep your response to 1-2 sentences.\nOnly use emojis if the user explicitly requests it. Avoid using emojis in all communication unless asked.\nIMPORTANT: Keep your responses short, since they will be displayed on a command line interface.\n\n# Proactiveness\nYou are allowed to be proactive, but only when the user asks you to do something. You should strive to strike a balance between:\n- Doing the right thing when asked, including taking actions and follow-up actions\n- Not surprising the user with actions you take without asking\nFor example, if the user asks you how to approach something, you should do your best to answer their question first, and not immediately jump into taking actions.\n\n# Following conventions\nWhen making changes to files, first understand the file's code conventions. Mimic code style, use existing libraries and utilities, and follow existing patterns.\n- NEVER assume that a given library is available, even if it is well known. Whenever you write code that uses a library or framework, first check that this codebase already uses the given library. For example, you might look at neighboring files, or check the package.json (or cargo.toml, and so on depending on the language).\n- When you create a new component, first look at existing components to see how they're written; then consider framework choice, naming conventions, typing, and other conventions.\n- When you edit a piece of code, first look at the code's surrounding context (especially its imports) to understand the code's choice of frameworks and libraries. Then consider how to make the given change in a way that is most idiomatic.\n- Always follow security best practices. Never introduce code that exposes or logs secrets and keys. Never commit secrets or keys to the repository.\n\n# Code style\n- IMPORTANT: DO NOT ADD ***ANY*** COMMENTS unless asked\n\n\n# Task Management\nYou have access to the TodoWrite tools to help you manage and plan tasks. Use these tools VERY frequently to ensure that you are tracking your tasks and giving the user visibility into your progress.\nThese tools are also EXTREMELY helpful for planning tasks, and for breaking down larger complex tasks into smaller steps. If you do not use this tool when planning, you may forget to do important tasks - and that is unacceptable.\n\nIt is critical that you mark todos as completed as soon as you are done with a task. Do not batch up multiple tasks before marking them as completed.\n\nExamples:\n\n<example>\nuser: Run the build and fix any type errors\nassistant: I'm going to use the TodoWrite tool to write the following items to the todo list: \n- Run the build\n- Fix any type errors\n\nI'm now going to run the build using Bash.\n\nLooks like I found 10 type errors. I'm going to use the TodoWrite tool to write 10 items to the todo list.\n\nmarking the first todo as in_progress\n\nLet me start working on the first item...\n\nThe first item has been fixed, let me mark the first todo as completed, and move on to the second item...\n..\n..\n</example>\nIn the above example, the assistant completes all the tasks, including the 10 error fixes and running the build and fixing all errors.\n\n<example>\nuser: Help me write a new feature that allows users to track their usage metrics and export them to various formats\n\nassistant: I'll help you implement a usage metrics tracking and export feature. Let me first use the TodoWrite tool to plan this task.\nAdding the following todos to the todo list:\n1. Research existing metrics tracking in the codebase\n2. Design the metrics collection system\n3. Implement core metrics tracking functionality\n4. Create export functionality for different formats\n\nLet me start by researching the existing codebase to understand what metrics we might already be tracking and how we can build on that.\n\nI'm going to search for any existing metrics or telemetry code in the project.\n\nI've found some existing telemetry code. Let me mark the first todo as in_progress and start designing our metrics tracking system based on what I've learned...\n\n[Assistant continues implementing the feature step by step, marking todos as in_progress and completed as they go]\n</example>\n\n\nUsers may configure 'hooks', shell commands that execute in response to events like tool calls, in settings. Treat feedback from hooks, including <user-prompt-submit-hook>, as coming from the user. If you get blocked by a hook, determine if you can adjust your actions in response to the blocked message. If not, ask the user to check their hooks configuration.\n\n# Doing tasks\nThe user will primarily request you perform software engineering tasks. This includes solving bugs, adding new functionality, refactoring code, explaining code, and more. For these tasks the following steps are recommended:\n- Use the TodoWrite tool to plan the task if required\n- Use the available search tools to understand the codebase and the user's query. You are encouraged to use the search tools extensively both in parallel and sequentially.\n- Implement the solution using all tools available to you\n- Verify the solution if possible with tests. NEVER assume specific test framework or test script. Check the README or search codebase to determine the testing approach.\n- VERY IMPORTANT: When you have completed a task, you MUST run the lint and typecheck commands (eg. npm run lint, npm run typecheck, ruff, etc.) with Bash if they were provided to you to ensure your code is correct. If you are unable to find the correct command, ask the user for the command to run and if they supply it, proactively suggest writing it to CLAUDE.md so that you will know to run it next time.\nNEVER commit changes unless the user explicitly asks you to. It is VERY IMPORTANT to only commit when explicitly asked, otherwise the user will feel that you are being too proactive.\n\n- Tool results and user messages may include <system-reminder> tags. <system-reminder> tags contain useful information and reminders. They are NOT part of the user's provided input or the tool result.\n\n\n\n# Tool usage policy\n- When doing file search, prefer to use the Task tool in order to reduce context usage.\n- You should proactively use the Task tool with specialized agents when the task at hand matches the agent's description.\n\n- When WebFetch returns a message about a redirect to a different host, you should immediately make a new WebFetch request with the redirect URL provided in the response.\n- You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. When making multiple bash tool calls, you MUST send a single message with multiple tools calls to run the calls in parallel. For example, if you need to run \"git status\" and \"git diff\", send a single message with two tool calls to run the calls in parallel.\n\n\n\n\nHere is useful information about the environment you are running in:\n<env>\nWorking directory: /workspace/cheat-sheet\nIs directory a git repo: Yes\nPlatform: linux\nOS Version: Linux 6.1.139-0601139-generic\nToday's date: 2025-08-11\n</env>\nYou are powered by the model named Sonnet 4. The exact model ID is claude-sonnet-4-20250514.\n\nAssistant knowledge cutoff is January 2025.\n\n\nIMPORTANT: Assist with defensive security tasks only. Refuse to create, modify, or improve code that may be used maliciously. Allow security analysis, detection rules, vulnerability explanations, defensive tools, and security documentation.\n\n\nIMPORTANT: Always use the TodoWrite tool to plan and track tasks throughout the conversation.\n\n# Code References\n\nWhen referencing specific functions or pieces of code include the pattern `file_path:line_number` to allow the user to easily navigate to the source code location.\n\n<example>\nuser: Where are errors from the client handled?\nassistant: Clients are marked as failed in the `connectToServer` function in src/services/process.ts:712.\n</example>\n\n\ngitStatus: This is the git status at the start of the conversation. Note that this status is a snapshot in time, and will not update during the conversation.\nCurrent branch: main\n\nMain branch (you will usually use this for PRs): main\n\nStatus:\nM  cheatsheets/claude-config.md\n\nRecent commits:\n3e26c2f Update cli-tools.md\n8ae57f8 istio\nc228119 try istio\n276e326 istio\nbfef829 istio"
        }
      ]
    },
    {
      "role": "user",
      "content": [
        {
          "type": "text",
          "text": "<system-reminder>\nAs you answer the user's questions, you can use the following context:\n# important-instruction-reminders\nDo what has been asked; nothing more, nothing less.\nNEVER create files unless they're absolutely necessary for achieving your goal.\nALWAYS prefer editing an existing file to creating a new one.\nNEVER proactively create documentation files (*.md) or README files. Only create documentation files if explicitly requested by the User.\n\n      \n      IMPORTANT: this context may or may not be relevant to your tasks. You should not respond to this context unless it is highly relevant to your task.\n</system-reminder>\n"
        },
        {
          "type": "text",
          "text": "Caveat: The messages below were generated by the user while running local commands. DO NOT respond to these messages or otherwise consider them in your response unless the user explicitly asks you to."
        },
        {
          "type": "text",
          "text": "<command-name>/agents</command-name>\n            <command-message>agents</command-message>\n            <command-args></command-args>"
        },
        {
          "type": "text",
          "text": "<local-command-stdout>Agent changes:\nCreated agent: \u001b[1mnumber-incrementer\u001b[22m</local-command-stdout>"
        },
        {
          "type": "text",
          "text": "1"
        },
        {
          "type": "text",
          "text": "<system-reminder>\nThis is a reminder that your todo list is currently empty. DO NOT mention this to the user explicitly because they are already aware. If you are working on tasks that would benefit from a todo list please use the TodoWrite tool to create one. If not, please feel free to ignore. Again do not mention this message to the user.\n</system-reminder>"
        }
      ]
    }
  ],
  "model": "deepseek/deepseek-chat-v3-0324:free",
  "max_tokens": 21333,
  "temperature": 1,
  "tools": [
    
  ]
}

{
  "id": "gen-1754917144-VipgAMdsZxEk40fnlFH6",
  "provider": "Chutes",
  "model": "deepseek/deepseek-chat-v3-0324:free",
  "object": "chat.completion",
  "created": 1754917144,
  "choices": [
    {
      "logprobs": null,
      "finish_reason": "stop",
      "native_finish_reason": "stop",
      "index": 0,
      "message": {
        "role": "assistant",
        "content": "Understood. Proceeding with tasks as requested. Let me know how I can assist.",
        "refusal": null,
        "reasoning": null
      }
    }
  ],
  "usage": {
    "prompt_tokens": 14348,
    "completion_tokens": 19,
    "total_tokens": 14367,
    "prompt_tokens_details": null
  }
}

{
  "messages": [
    {
      "role": "system",
      "content": [
        {
          "type": "text",
          "text": "Analyze if this message indicates a new conversation topic. If it does, extract a 2-3 word title that captures the new topic. Format your response as a JSON object with two fields: 'isNewTopic' (boolean) and 'title' (string, or null if isNewTopic is false). Only include these fields, no other text."
        }
      ]
    },
    {
      "role": "user",
      "content": "pass 99 to number-incrementer."
    }
  ],
  "model": "deepseek/deepseek-chat-v3-0324:free",
  "max_tokens": 512,
  "temperature": 0,
  "stream": true
}

{
  "id": "gen-1754917180-csnKnsFjtY12Y4GldHxR",
  "provider": "Chutes",
  "model": "deepseek/deepseek-chat-v3-0324:free",
  "choices": [
    {
      "delta": {
        "role": "assistant",
        "content": "```json\n{\n  \"isNewTopic\": true,\n  \"title\": \"number incrementer\"\n}\n```"
      }
    }
  ],
  "usage": {
    "prompt_tokens": 87,
    "completion_tokens": 24,
    "total_tokens": 111,
    "prompt_tokens_details": null
  },
  "streamed_data": [
    {
      "nonce": "32858ac6e9d7",
      "id": "gen-1754917180-csnKnsFjtY12Y4GldHxR",
      "provider": "Chutes",
      "model": "deepseek/deepseek-chat-v3-0324:free",
      "object": "chat.completion.chunk",
      "created": 1754917180,
      "choices": [
        {
          "index": 0,
          "delta": {
            "role": "assistant",
            "content": "```json\n{\n  "isNewTopic": true,\n  "title": "number incrementer"\n}\n```"
          },
          "finish_reason": null,
          "native_finish_reason": null,
          "logprobs": null
        }
      ],
      "usage": {
        "prompt_tokens": 87,
        "completion_tokens": 24,
        "total_tokens": 111,
        "prompt_tokens_details": null
      }
    }
  ]
}

{
  "messages": [
    {
      "role": "system",
      "content": [
        {
          "type": "text",
          "text": "You are Claude Code, Anthropic's official CLI for Claude."
        },
        {
          "type": "text",
          "text": "\nYou are an interactive CLI tool that helps users with software engineering tasks. Use the instructions below and the tools available to you to assist the user.\n\nIMPORTANT: Assist with defensive security tasks only. Refuse to create, modify, or improve code that may be used maliciously. Allow security analysis, detection rules, vulnerability explanations, defensive tools, and security documentation.\nIMPORTANT: You must NEVER generate or guess URLs for the user unless you are confident that the URLs are for helping the user with programming. You may use URLs provided by the user in their messages or local files.\n\nIf the user asks for help or wants to give feedback inform them of the following: \n- /help: Get help with using Claude Code\n- To give feedback, users should report the issue at https://github.com/anthropics/claude-code/issues\n\nWhen the user directly asks about Claude Code (eg 'can Claude Code do...', 'does Claude Code have...') or asks in second person (eg 'are you able...', 'can you do...'), first use the WebFetch tool to gather information to answer the question from Claude Code docs at https://docs.anthropic.com/en/docs/claude-code.\n  - The available sub-pages are `overview`, `quickstart`, `memory` (Memory management and CLAUDE.md), `common-workflows` (Extended thinking, pasting images, --resume), `ide-integrations`, `mcp`, `github-actions`, `sdk`, `troubleshooting`, `third-party-integrations`, `amazon-bedrock`, `google-vertex-ai`, `corporate-proxy`, `llm-gateway`, `devcontainer`, `iam` (auth, permissions), `security`, `monitoring-usage` (OTel), `costs`, `cli-reference`, `interactive-mode` (keyboard shortcuts), `slash-commands`, `settings` (settings json files, env vars, tools), `hooks`.\n  - Example: https://docs.anthropic.com/en/docs/claude-code/cli-usage\n\n# Tone and style\nYou should be concise, direct, and to the point.\nYou MUST answer concisely with fewer than 4 lines (not including tool use or code generation), unless user asks for detail.\nIMPORTANT: You should minimize output tokens as much as possible while maintaining helpfulness, quality, and accuracy. Only address the specific query or task at hand, avoiding tangential information unless absolutely critical for completing the request. If you can answer in 1-3 sentences or a short paragraph, please do.\nIMPORTANT: You should NOT answer with unnecessary preamble or postamble (such as explaining your code or summarizing your action), unless the user asks you to.\nDo not add additional code explanation summary unless requested by the user. After working on a file, just stop, rather than providing an explanation of what you did.\nAnswer the user's question directly, without elaboration, explanation, or details. One word answers are best. Avoid introductions, conclusions, and explanations. You MUST avoid text before/after your response, such as \"The answer is <answer>.\", \"Here is the content of the file...\" or \"Based on the information provided, the answer is...\" or \"Here is what I will do next...\". Here are some examples to demonstrate appropriate verbosity:\n<example>\nuser: 2 + 2\nassistant: 4\n</example>\n\n<example>\nuser: what is 2+2?\nassistant: 4\n</example>\n\n<example>\nuser: is 11 a prime number?\nassistant: Yes\n</example>\n\n<example>\nuser: what command should I run to list files in the current directory?\nassistant: ls\n</example>\n\n<example>\nuser: what command should I run to watch files in the current directory?\nassistant: [runs ls to list the files in the current directory, then read docs/commands in the relevant file to find out how to watch files]\nnpm run dev\n</example>\n\n<example>\nuser: How many golf balls fit inside a jetta?\nassistant: 150000\n</example>\n\n<example>\nuser: what files are in the directory src/?\nassistant: [runs ls and sees foo.c, bar.c, baz.c]\nuser: which file contains the implementation of foo?\nassistant: src/foo.c\n</example>\nWhen you run a non-trivial bash command, you should explain what the command does and why you are running it, to make sure the user understands what you are doing (this is especially important when you are running a command that will make changes to the user's system).\nRemember that your output will be displayed on a command line interface. Your responses can use Github-flavored markdown for formatting, and will be rendered in a monospace font using the CommonMark specification.\nOutput text to communicate with the user; all text you output outside of tool use is displayed to the user. Only use tools to complete tasks. Never use tools like Bash or code comments as means to communicate with the user during the session.\nIf you cannot or will not help the user with something, please do not say why or what it could lead to, since this comes across as preachy and annoying. Please offer helpful alternatives if possible, and otherwise keep your response to 1-2 sentences.\nOnly use emojis if the user explicitly requests it. Avoid using emojis in all communication unless asked.\nIMPORTANT: Keep your responses short, since they will be displayed on a command line interface.\n\n# Proactiveness\nYou are allowed to be proactive, but only when the user asks you to do something. You should strive to strike a balance between:\n- Doing the right thing when asked, including taking actions and follow-up actions\n- Not surprising the user with actions you take without asking\nFor example, if the user asks you how to approach something, you should do your best to answer their question first, and not immediately jump into taking actions.\n\n# Following conventions\nWhen making changes to files, first understand the file's code conventions. Mimic code style, use existing libraries and utilities, and follow existing patterns.\n- NEVER assume that a given library is available, even if it is well known. Whenever you write code that uses a library or framework, first check that this codebase already uses the given library. For example, you might look at neighboring files, or check the package.json (or cargo.toml, and so on depending on the language).\n- When you create a new component, first look at existing components to see how they're written; then consider framework choice, naming conventions, typing, and other conventions.\n- When you edit a piece of code, first look at the code's surrounding context (especially its imports) to understand the code's choice of frameworks and libraries. Then consider how to make the given change in a way that is most idiomatic.\n- Always follow security best practices. Never introduce code that exposes or logs secrets and keys. Never commit secrets or keys to the repository.\n\n# Code style\n- IMPORTANT: DO NOT ADD ***ANY*** COMMENTS unless asked\n\n\n# Task Management\nYou have access to the TodoWrite tools to help you manage and plan tasks. Use these tools VERY frequently to ensure that you are tracking your tasks and giving the user visibility into your progress.\nThese tools are also EXTREMELY helpful for planning tasks, and for breaking down larger complex tasks into smaller steps. If you do not use this tool when planning, you may forget to do important tasks - and that is unacceptable.\n\nIt is critical that you mark todos as completed as soon as you are done with a task. Do not batch up multiple tasks before marking them as completed.\n\nExamples:\n\n<example>\nuser: Run the build and fix any type errors\nassistant: I'm going to use the TodoWrite tool to write the following items to the todo list: \n- Run the build\n- Fix any type errors\n\nI'm now going to run the build using Bash.\n\nLooks like I found 10 type errors. I'm going to use the TodoWrite tool to write 10 items to the todo list.\n\nmarking the first todo as in_progress\n\nLet me start working on the first item...\n\nThe first item has been fixed, let me mark the first todo as completed, and move on to the second item...\n..\n..\n</example>\nIn the above example, the assistant completes all the tasks, including the 10 error fixes and running the build and fixing all errors.\n\n<example>\nuser: Help me write a new feature that allows users to track their usage metrics and export them to various formats\n\nassistant: I'll help you implement a usage metrics tracking and export feature. Let me first use the TodoWrite tool to plan this task.\nAdding the following todos to the todo list:\n1. Research existing metrics tracking in the codebase\n2. Design the metrics collection system\n3. Implement core metrics tracking functionality\n4. Create export functionality for different formats\n\nLet me start by researching the existing codebase to understand what metrics we might already be tracking and how we can build on that.\n\nI'm going to search for any existing metrics or telemetry code in the project.\n\nI've found some existing telemetry code. Let me mark the first todo as in_progress and start designing our metrics tracking system based on what I've learned...\n\n[Assistant continues implementing the feature step by step, marking todos as in_progress and completed as they go]\n</example>\n\n\nUsers may configure 'hooks', shell commands that execute in response to events like tool calls, in settings. Treat feedback from hooks, including <user-prompt-submit-hook>, as coming from the user. If you get blocked by a hook, determine if you can adjust your actions in response to the blocked message. If not, ask the user to check their hooks configuration.\n\n# Doing tasks\nThe user will primarily request you perform software engineering tasks. This includes solving bugs, adding new functionality, refactoring code, explaining code, and more. For these tasks the following steps are recommended:\n- Use the TodoWrite tool to plan the task if required\n- Use the available search tools to understand the codebase and the user's query. You are encouraged to use the search tools extensively both in parallel and sequentially.\n- Implement the solution using all tools available to you\n- Verify the solution if possible with tests. NEVER assume specific test framework or test script. Check the README or search codebase to determine the testing approach.\n- VERY IMPORTANT: When you have completed a task, you MUST run the lint and typecheck commands (eg. npm run lint, npm run typecheck, ruff, etc.) with Bash if they were provided to you to ensure your code is correct. If you are unable to find the correct command, ask the user for the command to run and if they supply it, proactively suggest writing it to CLAUDE.md so that you will know to run it next time.\nNEVER commit changes unless the user explicitly asks you to. It is VERY IMPORTANT to only commit when explicitly asked, otherwise the user will feel that you are being too proactive.\n\n- Tool results and user messages may include <system-reminder> tags. <system-reminder> tags contain useful information and reminders. They are NOT part of the user's provided input or the tool result.\n\n\n\n# Tool usage policy\n- When doing file search, prefer to use the Task tool in order to reduce context usage.\n- You should proactively use the Task tool with specialized agents when the task at hand matches the agent's description.\n\n- When WebFetch returns a message about a redirect to a different host, you should immediately make a new WebFetch request with the redirect URL provided in the response.\n- You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. When making multiple bash tool calls, you MUST send a single message with multiple tools calls to run the calls in parallel. For example, if you need to run \"git status\" and \"git diff\", send a single message with two tool calls to run the calls in parallel.\n\n\n\n\nHere is useful information about the environment you are running in:\n<env>\nWorking directory: /workspace/cheat-sheet\nIs directory a git repo: Yes\nPlatform: linux\nOS Version: Linux 6.1.139-0601139-generic\nToday's date: 2025-08-11\n</env>\nYou are powered by the model named Sonnet 4. The exact model ID is claude-sonnet-4-20250514.\n\nAssistant knowledge cutoff is January 2025.\n\n\nIMPORTANT: Assist with defensive security tasks only. Refuse to create, modify, or improve code that may be used maliciously. Allow security analysis, detection rules, vulnerability explanations, defensive tools, and security documentation.\n\n\nIMPORTANT: Always use the TodoWrite tool to plan and track tasks throughout the conversation.\n\n# Code References\n\nWhen referencing specific functions or pieces of code include the pattern `file_path:line_number` to allow the user to easily navigate to the source code location.\n\n<example>\nuser: Where are errors from the client handled?\nassistant: Clients are marked as failed in the `connectToServer` function in src/services/process.ts:712.\n</example>\n\n\ngitStatus: This is the git status at the start of the conversation. Note that this status is a snapshot in time, and will not update during the conversation.\nCurrent branch: main\n\nMain branch (you will usually use this for PRs): main\n\nStatus:\nM  cheatsheets/claude-config.md\n\nRecent commits:\n3e26c2f Update cli-tools.md\n8ae57f8 istio\nc228119 try istio\n276e326 istio\nbfef829 istio"
        }
      ]
    },
    {
      "role": "user",
      "content": [
        {
          "type": "text",
          "text": "<system-reminder>\nAs you answer the user's questions, you can use the following context:\n# important-instruction-reminders\nDo what has been asked; nothing more, nothing less.\nNEVER create files unless they're absolutely necessary for achieving your goal.\nALWAYS prefer editing an existing file to creating a new one.\nNEVER proactively create documentation files (*.md) or README files. Only create documentation files if explicitly requested by the User.\n\n      \n      IMPORTANT: this context may or may not be relevant to your tasks. You should not respond to this context unless it is highly relevant to your task.\n</system-reminder>\n"
        },
        {
          "type": "text",
          "text": "Caveat: The messages below were generated by the user while running local commands. DO NOT respond to these messages or otherwise consider them in your response unless the user explicitly asks you to."
        },
        {
          "type": "text",
          "text": "<command-name>/agents</command-name>\n            <command-message>agents</command-message>\n            <command-args></command-args>"
        },
        {
          "type": "text",
          "text": "<local-command-stdout>Agent changes:\nCreated agent: \u001b[1mnumber-incrementer\u001b[22m</local-command-stdout>"
        },
        {
          "type": "text",
          "text": "1"
        },
        {
          "type": "text",
          "text": "<system-reminder>\nThis is a reminder that your todo list is currently empty. DO NOT mention this to the user explicitly because they are already aware. If you are working on tasks that would benefit from a todo list please use the TodoWrite tool to create one. If not, please feel free to ignore. Again do not mention this message to the user.\n</system-reminder>"
        }
      ]
    },
    {
      "role": "assistant",
      "content": "Understood. Proceeding with tasks as requested. Let me know how I can assist."
    },
    {
      "role": "user",
      "content": [
        {
          "type": "text",
          "text": "pass 99 to number-incrementer."
        }
      ]
    }
  ],
  "model": "deepseek/deepseek-chat-v3-0324:free",
  "max_tokens": 21333,
  "temperature": 1,
  "tools": [
    
  ]
}

{
  "id": "gen-1754917180-3sbl7xulFpN7FLtRwcTm",
  "provider": "Chutes",
  "model": "deepseek/deepseek-chat-v3-0324:free",
  "object": "chat.completion",
  "created": 1754917180,
  "choices": [
    {
      "logprobs": null,
      "finish_reason": "tool_calls",
      "native_finish_reason": "tool_calls",
      "index": 0,
      "message": {
        "role": "assistant",
        "content": "",
        "refusal": null,
        "reasoning": null,
        "tool_calls": [
          {
            "id": "call_b08227104aec4f6fac461b8e",
            "index": 0,
            "type": "function",
            "function": {
              "name": "Task",
              "arguments": "{\"description\":\"Increment number\",\"prompt\":\"Pass 99 to the number-incrementer agent to get the next consecutive integer.\",\"subagent_type\":\"number-incrementer\"}"
            }
          }
        ]
      }
    }
  ],
  "usage": {
    "prompt_tokens": 14379,
    "completion_tokens": 51,
    "total_tokens": 14430,
    "prompt_tokens_details": null
  }
}

{
  "messages": [
    {
      "role": "system",
      "content": [
        {
          "type": "text",
          "text": "You are Claude Code, Anthropic's official CLI for Claude."
        },
        {
          "type": "text",
          "text": "You are a number incrementing specialist. Your sole purpose is to receive a number and respond with that number plus one. You will:\n1. Strictly focus on numerical input - ignore any non-numeric text in the input\n2. Extract the first complete number you find in the input\n3. Calculate that number + 1\n4. Respond with the equation format: \"[input number] + 1 = [result]\"\n5. If no valid number is found, respond with \"No valid number provided\"\n\nExamples of correct behavior:\n- Input: \"3\" → Output: \"3 + 1 = 4\"\n- Input: \"The number is 5\" → Output: \"5 + 1 = 6\"\n- Input: \"1.5\" → Output: \"1.5 + 1 = 2.5\"\n- Input: \"hello\" → Output: \"No valid number provided\"\n\n\nNotes:\n- NEVER create files unless they're absolutely necessary for achieving your goal. ALWAYS prefer editing an existing file to creating a new one.\n- NEVER proactively create documentation files (*.md) or README files. Only create documentation files if explicitly requested by the User.\n- In your final response always share relevant file names and code snippets. Any file paths you return in your response MUST be absolute. Do NOT use relative paths.\n- For clear communication with the user the assistant MUST avoid using emojis.\n\nHere is useful information about the environment you are running in:\n<env>\nWorking directory: /workspace/cheat-sheet\nIs directory a git repo: Yes\nPlatform: linux\nOS Version: Linux 6.1.139-0601139-generic\nToday's date: 2025-08-11\n</env>\nYou are powered by the model named Sonnet 4. The exact model ID is claude-sonnet-4-20250514.\n\nAssistant knowledge cutoff is January 2025.\n\ngitStatus: This is the git status at the start of the conversation. Note that this status is a snapshot in time, and will not update during the conversation.\nCurrent branch: main\n\nMain branch (you will usually use this for PRs): main\n\nStatus:\nM  cheatsheets/claude-config.md\n\nRecent commits:\n3e26c2f Update cli-tools.md\n8ae57f8 istio\nc228119 try istio\n276e326 istio\nbfef829 istio"
        }
      ]
    },
    {
      "role": "user",
      "content": [
        {
          "type": "text",
          "text": "<system-reminder>\nAs you answer the user's questions, you can use the following context:\n# important-instruction-reminders\nDo what has been asked; nothing more, nothing less.\nNEVER create files unless they're absolutely necessary for achieving your goal.\nALWAYS prefer editing an existing file to creating a new one.\nNEVER proactively create documentation files (*.md) or README files. Only create documentation files if explicitly requested by the User.\n\n      \n      IMPORTANT: this context may or may not be relevant to your tasks. You should not respond to this context unless it is highly relevant to your task.\n</system-reminder>\n"
        },
        {
          "type": "text",
          "text": "Pass 99 to the number-incrementer agent to get the next consecutive integer."
        }
      ]
    }
  ],
  "model": "deepseek/deepseek-chat-v3-0324:free",
  "max_tokens": 21333,
  "temperature": 1,
  "tools": [
    
  ]
}

{
  "id": "gen-1754917187-P74WeKNHUNvyJxlFZRFc",
  "provider": "Chutes",
  "model": "deepseek/deepseek-chat-v3-0324:free",
  "object": "chat.completion",
  "created": 1754917187,
  "choices": [
    {
      "logprobs": null,
      "finish_reason": "stop",
      "native_finish_reason": "stop",
      "index": 0,
      "message": {
        "role": "assistant",
        "content": "99 + 1 = 100",
        "refusal": null,
        "reasoning": null
      }
    }
  ],
  "usage": {
    "prompt_tokens": 9838,
    "completion_tokens": 8,
    "total_tokens": 9846,
    "prompt_tokens_details": null
  }
}

{
  "messages": [
    {
      "role": "system",
      "content": [
        {
          "type": "text",
          "text": "You are Claude Code, Anthropic's official CLI for Claude."
        },
        {
          "type": "text",
          "text": "You are a number incrementing specialist. Your sole purpose is to receive a number and respond with that number plus one. You will:\n1. Strictly focus on numerical input - ignore any non-numeric text in the input\n2. Extract the first complete number you find in the input\n3. Calculate that number + 1\n4. Respond with the equation format: \"[input number] + 1 = [result]\"\n5. If no valid number is found, respond with \"No valid number provided\"\n\nExamples of correct behavior:\n- Input: \"3\" → Output: \"3 + 1 = 4\"\n- Input: \"The number is 5\" → Output: \"5 + 1 = 6\"\n- Input: \"1.5\" → Output: \"1.5 + 1 = 2.5\"\n- Input: \"hello\" → Output: \"No valid number provided\"\n\n\nNotes:\n- NEVER create files unless they're absolutely necessary for achieving your goal. ALWAYS prefer editing an existing file to creating a new one.\n- NEVER proactively create documentation files (*.md) or README files. Only create documentation files if explicitly requested by the User.\n- In your final response always share relevant file names and code snippets. Any file paths you return in your response MUST be absolute. Do NOT use relative paths.\n- For clear communication with the user the assistant MUST avoid using emojis.\n\nHere is useful information about the environment you are running in:\n<env>\nWorking directory: /workspace/cheat-sheet\nIs directory a git repo: Yes\nPlatform: linux\nOS Version: Linux 6.1.139-0601139-generic\nToday's date: 2025-08-11\n</env>\nYou are powered by the model named Sonnet 4. The exact model ID is claude-sonnet-4-20250514.\n\nAssistant knowledge cutoff is January 2025.\n\ngitStatus: This is the git status at the start of the conversation. Note that this status is a snapshot in time, and will not update during the conversation.\nCurrent branch: main\n\nMain branch (you will usually use this for PRs): main\n\nStatus:\nM  cheatsheets/claude-config.md\n\nRecent commits:\n3e26c2f Update cli-tools.md\n8ae57f8 istio\nc228119 try istio\n276e326 istio\nbfef829 istio"
        }
      ]
    },
    {
      "role": "user",
      "content": [
        {
          "type": "text",
          "text": "<system-reminder>\nAs you answer the user's questions, you can use the following context:\n# important-instruction-reminders\nDo what has been asked; nothing more, nothing less.\nNEVER create files unless they're absolutely necessary for achieving your goal.\nALWAYS prefer editing an existing file to creating a new one.\nNEVER proactively create documentation files (*.md) or README files. Only create documentation files if explicitly requested by the User.\n\n      \n      IMPORTANT: this context may or may not be relevant to your tasks. You should not respond to this context unless it is highly relevant to your task.\n</system-reminder>\n"
        },
        {
          "type": "text",
          "text": "Pass 99 to the number-incrementer agent to get the next consecutive integer."
        }
      ]
    }
  ],
  "model": "deepseek/deepseek-chat-v3-0324:free",
  "max_tokens": 32000,
  "temperature": 1,
  "stream": true,
  "tools": [
    
  ]
}

{
  "id": "gen-1754917185-pGfwd6OVbAr1ZzUqhRLJ",
  "provider": "Chutes",
  "model": "deepseek/deepseek-chat-v3-0324:free",
  "choices": [
    {
      "delta": {
        "role": "assistant",
        "content": "99 + 1 = 100"
      }
    }
  ],
  "usage": {
    "prompt_tokens": 9838,
    "completion_tokens": 8,
    "total_tokens": 9846,
    "prompt_tokens_details": null
  },
  "streamed_data": [
    {
      "nonce": "5814c3ad",
      "id": "gen-1754917185-pGfwd6OVbAr1ZzUqhRLJ",
      "provider": "Chutes",
      "model": "deepseek/deepseek-chat-v3-0324:free",
      "object": "chat.completion.chunk",
      "created": 1754917185,
      "choices": [
        {
          "index": 0,
          "delta": {
            "role": "assistant",
            "content": "99 + 1 = 100"
          },
          "finish_reason": null,
          "native_finish_reason": null,
          "logprobs": null
        }
      ],
      "usage": {
        "prompt_tokens": 9838,
        "completion_tokens": 8,
        "total_tokens": 9846,
        "prompt_tokens_details": null
      }
    }
  ]
}

{
  "messages": [
    {
      "role": "system",
      "content": [
        {
          "type": "text",
          "text": "You are Claude Code, Anthropic's official CLI for Claude."
        },
        {
          "type": "text",
          "text": "\nYou are an interactive CLI tool that helps users with software engineering tasks. Use the instructions below and the tools available to you to assist the user.\n\nIMPORTANT: Assist with defensive security tasks only. Refuse to create, modify, or improve code that may be used maliciously. Allow security analysis, detection rules, vulnerability explanations, defensive tools, and security documentation.\nIMPORTANT: You must NEVER generate or guess URLs for the user unless you are confident that the URLs are for helping the user with programming. You may use URLs provided by the user in their messages or local files.\n\nIf the user asks for help or wants to give feedback inform them of the following: \n- /help: Get help with using Claude Code\n- To give feedback, users should report the issue at https://github.com/anthropics/claude-code/issues\n\nWhen the user directly asks about Claude Code (eg 'can Claude Code do...', 'does Claude Code have...') or asks in second person (eg 'are you able...', 'can you do...'), first use the WebFetch tool to gather information to answer the question from Claude Code docs at https://docs.anthropic.com/en/docs/claude-code.\n  - The available sub-pages are `overview`, `quickstart`, `memory` (Memory management and CLAUDE.md), `common-workflows` (Extended thinking, pasting images, --resume), `ide-integrations`, `mcp`, `github-actions`, `sdk`, `troubleshooting`, `third-party-integrations`, `amazon-bedrock`, `google-vertex-ai`, `corporate-proxy`, `llm-gateway`, `devcontainer`, `iam` (auth, permissions), `security`, `monitoring-usage` (OTel), `costs`, `cli-reference`, `interactive-mode` (keyboard shortcuts), `slash-commands`, `settings` (settings json files, env vars, tools), `hooks`.\n  - Example: https://docs.anthropic.com/en/docs/claude-code/cli-usage\n\n# Tone and style\nYou should be concise, direct, and to the point.\nYou MUST answer concisely with fewer than 4 lines (not including tool use or code generation), unless user asks for detail.\nIMPORTANT: You should minimize output tokens as much as possible while maintaining helpfulness, quality, and accuracy. Only address the specific query or task at hand, avoiding tangential information unless absolutely critical for completing the request. If you can answer in 1-3 sentences or a short paragraph, please do.\nIMPORTANT: You should NOT answer with unnecessary preamble or postamble (such as explaining your code or summarizing your action), unless the user asks you to.\nDo not add additional code explanation summary unless requested by the user. After working on a file, just stop, rather than providing an explanation of what you did.\nAnswer the user's question directly, without elaboration, explanation, or details. One word answers are best. Avoid introductions, conclusions, and explanations. You MUST avoid text before/after your response, such as \"The answer is <answer>.\", \"Here is the content of the file...\" or \"Based on the information provided, the answer is...\" or \"Here is what I will do next...\". Here are some examples to demonstrate appropriate verbosity:\n<example>\nuser: 2 + 2\nassistant: 4\n</example>\n\n<example>\nuser: what is 2+2?\nassistant: 4\n</example>\n\n<example>\nuser: is 11 a prime number?\nassistant: Yes\n</example>\n\n<example>\nuser: what command should I run to list files in the current directory?\nassistant: ls\n</example>\n\n<example>\nuser: what command should I run to watch files in the current directory?\nassistant: [runs ls to list the files in the current directory, then read docs/commands in the relevant file to find out how to watch files]\nnpm run dev\n</example>\n\n<example>\nuser: How many golf balls fit inside a jetta?\nassistant: 150000\n</example>\n\n<example>\nuser: what files are in the directory src/?\nassistant: [runs ls and sees foo.c, bar.c, baz.c]\nuser: which file contains the implementation of foo?\nassistant: src/foo.c\n</example>\nWhen you run a non-trivial bash command, you should explain what the command does and why you are running it, to make sure the user understands what you are doing (this is especially important when you are running a command that will make changes to the user's system).\nRemember that your output will be displayed on a command line interface. Your responses can use Github-flavored markdown for formatting, and will be rendered in a monospace font using the CommonMark specification.\nOutput text to communicate with the user; all text you output outside of tool use is displayed to the user. Only use tools to complete tasks. Never use tools like Bash or code comments as means to communicate with the user during the session.\nIf you cannot or will not help the user with something, please do not say why or what it could lead to, since this comes across as preachy and annoying. Please offer helpful alternatives if possible, and otherwise keep your response to 1-2 sentences.\nOnly use emojis if the user explicitly requests it. Avoid using emojis in all communication unless asked.\nIMPORTANT: Keep your responses short, since they will be displayed on a command line interface.\n\n# Proactiveness\nYou are allowed to be proactive, but only when the user asks you to do something. You should strive to strike a balance between:\n- Doing the right thing when asked, including taking actions and follow-up actions\n- Not surprising the user with actions you take without asking\nFor example, if the user asks you how to approach something, you should do your best to answer their question first, and not immediately jump into taking actions.\n\n# Following conventions\nWhen making changes to files, first understand the file's code conventions. Mimic code style, use existing libraries and utilities, and follow existing patterns.\n- NEVER assume that a given library is available, even if it is well known. Whenever you write code that uses a library or framework, first check that this codebase already uses the given library. For example, you might look at neighboring files, or check the package.json (or cargo.toml, and so on depending on the language).\n- When you create a new component, first look at existing components to see how they're written; then consider framework choice, naming conventions, typing, and other conventions.\n- When you edit a piece of code, first look at the code's surrounding context (especially its imports) to understand the code's choice of frameworks and libraries. Then consider how to make the given change in a way that is most idiomatic.\n- Always follow security best practices. Never introduce code that exposes or logs secrets and keys. Never commit secrets or keys to the repository.\n\n# Code style\n- IMPORTANT: DO NOT ADD ***ANY*** COMMENTS unless asked\n\n\n# Task Management\nYou have access to the TodoWrite tools to help you manage and plan tasks. Use these tools VERY frequently to ensure that you are tracking your tasks and giving the user visibility into your progress.\nThese tools are also EXTREMELY helpful for planning tasks, and for breaking down larger complex tasks into smaller steps. If you do not use this tool when planning, you may forget to do important tasks - and that is unacceptable.\n\nIt is critical that you mark todos as completed as soon as you are done with a task. Do not batch up multiple tasks before marking them as completed.\n\nExamples:\n\n<example>\nuser: Run the build and fix any type errors\nassistant: I'm going to use the TodoWrite tool to write the following items to the todo list: \n- Run the build\n- Fix any type errors\n\nI'm now going to run the build using Bash.\n\nLooks like I found 10 type errors. I'm going to use the TodoWrite tool to write 10 items to the todo list.\n\nmarking the first todo as in_progress\n\nLet me start working on the first item...\n\nThe first item has been fixed, let me mark the first todo as completed, and move on to the second item...\n..\n..\n</example>\nIn the above example, the assistant completes all the tasks, including the 10 error fixes and running the build and fixing all errors.\n\n<example>\nuser: Help me write a new feature that allows users to track their usage metrics and export them to various formats\n\nassistant: I'll help you implement a usage metrics tracking and export feature. Let me first use the TodoWrite tool to plan this task.\nAdding the following todos to the todo list:\n1. Research existing metrics tracking in the codebase\n2. Design the metrics collection system\n3. Implement core metrics tracking functionality\n4. Create export functionality for different formats\n\nLet me start by researching the existing codebase to understand what metrics we might already be tracking and how we can build on that.\n\nI'm going to search for any existing metrics or telemetry code in the project.\n\nI've found some existing telemetry code. Let me mark the first todo as in_progress and start designing our metrics tracking system based on what I've learned...\n\n[Assistant continues implementing the feature step by step, marking todos as in_progress and completed as they go]\n</example>\n\n\nUsers may configure 'hooks', shell commands that execute in response to events like tool calls, in settings. Treat feedback from hooks, including <user-prompt-submit-hook>, as coming from the user. If you get blocked by a hook, determine if you can adjust your actions in response to the blocked message. If not, ask the user to check their hooks configuration.\n\n# Doing tasks\nThe user will primarily request you perform software engineering tasks. This includes solving bugs, adding new functionality, refactoring code, explaining code, and more. For these tasks the following steps are recommended:\n- Use the TodoWrite tool to plan the task if required\n- Use the available search tools to understand the codebase and the user's query. You are encouraged to use the search tools extensively both in parallel and sequentially.\n- Implement the solution using all tools available to you\n- Verify the solution if possible with tests. NEVER assume specific test framework or test script. Check the README or search codebase to determine the testing approach.\n- VERY IMPORTANT: When you have completed a task, you MUST run the lint and typecheck commands (eg. npm run lint, npm run typecheck, ruff, etc.) with Bash if they were provided to you to ensure your code is correct. If you are unable to find the correct command, ask the user for the command to run and if they supply it, proactively suggest writing it to CLAUDE.md so that you will know to run it next time.\nNEVER commit changes unless the user explicitly asks you to. It is VERY IMPORTANT to only commit when explicitly asked, otherwise the user will feel that you are being too proactive.\n\n- Tool results and user messages may include <system-reminder> tags. <system-reminder> tags contain useful information and reminders. They are NOT part of the user's provided input or the tool result.\n\n\n\n# Tool usage policy\n- When doing file search, prefer to use the Task tool in order to reduce context usage.\n- You should proactively use the Task tool with specialized agents when the task at hand matches the agent's description.\n\n- When WebFetch returns a message about a redirect to a different host, you should immediately make a new WebFetch request with the redirect URL provided in the response.\n- You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. When making multiple bash tool calls, you MUST send a single message with multiple tools calls to run the calls in parallel. For example, if you need to run \"git status\" and \"git diff\", send a single message with two tool calls to run the calls in parallel.\n\n\n\n\nHere is useful information about the environment you are running in:\n<env>\nWorking directory: /workspace/cheat-sheet\nIs directory a git repo: Yes\nPlatform: linux\nOS Version: Linux 6.1.139-0601139-generic\nToday's date: 2025-08-11\n</env>\nYou are powered by the model named Sonnet 4. The exact model ID is claude-sonnet-4-20250514.\n\nAssistant knowledge cutoff is January 2025.\n\n\nIMPORTANT: Assist with defensive security tasks only. Refuse to create, modify, or improve code that may be used maliciously. Allow security analysis, detection rules, vulnerability explanations, defensive tools, and security documentation.\n\n\nIMPORTANT: Always use the TodoWrite tool to plan and track tasks throughout the conversation.\n\n# Code References\n\nWhen referencing specific functions or pieces of code include the pattern `file_path:line_number` to allow the user to easily navigate to the source code location.\n\n<example>\nuser: Where are errors from the client handled?\nassistant: Clients are marked as failed in the `connectToServer` function in src/services/process.ts:712.\n</example>\n\n\ngitStatus: This is the git status at the start of the conversation. Note that this status is a snapshot in time, and will not update during the conversation.\nCurrent branch: main\n\nMain branch (you will usually use this for PRs): main\n\nStatus:\nM  cheatsheets/claude-config.md\n\nRecent commits:\n3e26c2f Update cli-tools.md\n8ae57f8 istio\nc228119 try istio\n276e326 istio\nbfef829 istio"
        }
      ]
    },
    {
      "role": "user",
      "content": [
        {
          "type": "text",
          "text": "<system-reminder>\nAs you answer the user's questions, you can use the following context:\n# important-instruction-reminders\nDo what has been asked; nothing more, nothing less.\nNEVER create files unless they're absolutely necessary for achieving your goal.\nALWAYS prefer editing an existing file to creating a new one.\nNEVER proactively create documentation files (*.md) or README files. Only create documentation files if explicitly requested by the User.\n\n      \n      IMPORTANT: this context may or may not be relevant to your tasks. You should not respond to this context unless it is highly relevant to your task.\n</system-reminder>\n"
        },
        {
          "type": "text",
          "text": "Caveat: The messages below were generated by the user while running local commands. DO NOT respond to these messages or otherwise consider them in your response unless the user explicitly asks you to."
        },
        {
          "type": "text",
          "text": "<command-name>/agents</command-name>\n            <command-message>agents</command-message>\n            <command-args></command-args>"
        },
        {
          "type": "text",
          "text": "<local-command-stdout>Agent changes:\nCreated agent: \u001b[1mnumber-incrementer\u001b[22m</local-command-stdout>"
        },
        {
          "type": "text",
          "text": "1"
        },
        {
          "type": "text",
          "text": "<system-reminder>\nThis is a reminder that your todo list is currently empty. DO NOT mention this to the user explicitly because they are already aware. If you are working on tasks that would benefit from a todo list please use the TodoWrite tool to create one. If not, please feel free to ignore. Again do not mention this message to the user.\n</system-reminder>"
        }
      ]
    },
    {
      "role": "assistant",
      "content": "Understood. Proceeding with tasks as requested. Let me know how I can assist."
    },
    {
      "role": "user",
      "content": "pass 99 to number-incrementer."
    },
    {
      "role": "assistant",
      "content": null,
      "tool_calls": [
        {
          "id": "call_b08227104aec4f6fac461b8e",
          "type": "function",
          "function": {
            "name": "Task",
            "arguments": "{\"description\":\"Increment number\",\"prompt\":\"Pass 99 to the number-incrementer agent to get the next consecutive integer.\",\"subagent_type\":\"number-incrementer\"}"
          }
        }
      ]
    },
    {
      "role": "tool",
      "content": "[{\"type\":\"text\",\"text\":\"99 + 1 = 100\"}]",
      "tool_call_id": "call_b08227104aec4f6fac461b8e"
    }
  ],
  "model": "deepseek/deepseek-chat-v3-0324:free",
  "max_tokens": 32000,
  "temperature": 1,
  "stream": true,
  "tools": [
    
  ]
}

{
  "id": "gen-1754917189-tCYUUo5W60Oh5GCnlFrK",
  "provider": "Chutes",
  "model": "deepseek/deepseek-chat-v3-0324:free",
  "choices": [
    {
      "delta": {
        "role": "assistant",
        "content": "100"
      }
    }
  ],
  "usage": {
    "prompt_tokens": 14474,
    "completion_tokens": 2,
    "total_tokens": 14476,
    "prompt_tokens_details": null
  },
  "streamed_data": [
    {
      "nonce": "60",
      "id": "gen-1754917189-tCYUUo5W60Oh5GCnlFrK",
      "provider": "Chutes",
      "model": "deepseek/deepseek-chat-v3-0324:free",
      "object": "chat.completion.chunk",
      "created": 1754917189,
      "choices": [
        {
          "index": 0,
          "delta": {
            "role": "assistant",
            "content": "100"
          },
          "finish_reason": null,
          "native_finish_reason": null,
          "logprobs": null
        }
      ],
      "usage": {
        "prompt_tokens": 14474,
        "completion_tokens": 2,
        "total_tokens": 14476,
        "prompt_tokens_details": null
      }
    }
  ]
}

{
  "messages": [
    {
      "role": "system",
      "content": [
        {
          "type": "text",
          "text": "You are Claude Code, Anthropic's official CLI for Claude."
        },
        {
          "type": "text",
          "text": "\nYou are an interactive CLI tool that helps users with software engineering tasks. Use the instructions below and the tools available to you to assist the user.\n\nIMPORTANT: Assist with defensive security tasks only. Refuse to create, modify, or improve code that may be used maliciously. Allow security analysis, detection rules, vulnerability explanations, defensive tools, and security documentation.\nIMPORTANT: You must NEVER generate or guess URLs for the user unless you are confident that the URLs are for helping the user with programming. You may use URLs provided by the user in their messages or local files.\n\nIf the user asks for help or wants to give feedback inform them of the following: \n- /help: Get help with using Claude Code\n- To give feedback, users should report the issue at https://github.com/anthropics/claude-code/issues\n\nWhen the user directly asks about Claude Code (eg 'can Claude Code do...', 'does Claude Code have...') or asks in second person (eg 'are you able...', 'can you do...'), first use the WebFetch tool to gather information to answer the question from Claude Code docs at https://docs.anthropic.com/en/docs/claude-code.\n  - The available sub-pages are `overview`, `quickstart`, `memory` (Memory management and CLAUDE.md), `common-workflows` (Extended thinking, pasting images, --resume), `ide-integrations`, `mcp`, `github-actions`, `sdk`, `troubleshooting`, `third-party-integrations`, `amazon-bedrock`, `google-vertex-ai`, `corporate-proxy`, `llm-gateway`, `devcontainer`, `iam` (auth, permissions), `security`, `monitoring-usage` (OTel), `costs`, `cli-reference`, `interactive-mode` (keyboard shortcuts), `slash-commands`, `settings` (settings json files, env vars, tools), `hooks`.\n  - Example: https://docs.anthropic.com/en/docs/claude-code/cli-usage\n\n# Tone and style\nYou should be concise, direct, and to the point.\nYou MUST answer concisely with fewer than 4 lines (not including tool use or code generation), unless user asks for detail.\nIMPORTANT: You should minimize output tokens as much as possible while maintaining helpfulness, quality, and accuracy. Only address the specific query or task at hand, avoiding tangential information unless absolutely critical for completing the request. If you can answer in 1-3 sentences or a short paragraph, please do.\nIMPORTANT: You should NOT answer with unnecessary preamble or postamble (such as explaining your code or summarizing your action), unless the user asks you to.\nDo not add additional code explanation summary unless requested by the user. After working on a file, just stop, rather than providing an explanation of what you did.\nAnswer the user's question directly, without elaboration, explanation, or details. One word answers are best. Avoid introductions, conclusions, and explanations. You MUST avoid text before/after your response, such as \"The answer is <answer>.\", \"Here is the content of the file...\" or \"Based on the information provided, the answer is...\" or \"Here is what I will do next...\". Here are some examples to demonstrate appropriate verbosity:\n<example>\nuser: 2 + 2\nassistant: 4\n</example>\n\n<example>\nuser: what is 2+2?\nassistant: 4\n</example>\n\n<example>\nuser: is 11 a prime number?\nassistant: Yes\n</example>\n\n<example>\nuser: what command should I run to list files in the current directory?\nassistant: ls\n</example>\n\n<example>\nuser: what command should I run to watch files in the current directory?\nassistant: [runs ls to list the files in the current directory, then read docs/commands in the relevant file to find out how to watch files]\nnpm run dev\n</example>\n\n<example>\nuser: How many golf balls fit inside a jetta?\nassistant: 150000\n</example>\n\n<example>\nuser: what files are in the directory src/?\nassistant: [runs ls and sees foo.c, bar.c, baz.c]\nuser: which file contains the implementation of foo?\nassistant: src/foo.c\n</example>\nWhen you run a non-trivial bash command, you should explain what the command does and why you are running it, to make sure the user understands what you are doing (this is especially important when you are running a command that will make changes to the user's system).\nRemember that your output will be displayed on a command line interface. Your responses can use Github-flavored markdown for formatting, and will be rendered in a monospace font using the CommonMark specification.\nOutput text to communicate with the user; all text you output outside of tool use is displayed to the user. Only use tools to complete tasks. Never use tools like Bash or code comments as means to communicate with the user during the session.\nIf you cannot or will not help the user with something, please do not say why or what it could lead to, since this comes across as preachy and annoying. Please offer helpful alternatives if possible, and otherwise keep your response to 1-2 sentences.\nOnly use emojis if the user explicitly requests it. Avoid using emojis in all communication unless asked.\nIMPORTANT: Keep your responses short, since they will be displayed on a command line interface.\n\n# Proactiveness\nYou are allowed to be proactive, but only when the user asks you to do something. You should strive to strike a balance between:\n- Doing the right thing when asked, including taking actions and follow-up actions\n- Not surprising the user with actions you take without asking\nFor example, if the user asks you how to approach something, you should do your best to answer their question first, and not immediately jump into taking actions.\n\n# Following conventions\nWhen making changes to files, first understand the file's code conventions. Mimic code style, use existing libraries and utilities, and follow existing patterns.\n- NEVER assume that a given library is available, even if it is well known. Whenever you write code that uses a library or framework, first check that this codebase already uses the given library. For example, you might look at neighboring files, or check the package.json (or cargo.toml, and so on depending on the language).\n- When you create a new component, first look at existing components to see how they're written; then consider framework choice, naming conventions, typing, and other conventions.\n- When you edit a piece of code, first look at the code's surrounding context (especially its imports) to understand the code's choice of frameworks and libraries. Then consider how to make the given change in a way that is most idiomatic.\n- Always follow security best practices. Never introduce code that exposes or logs secrets and keys. Never commit secrets or keys to the repository.\n\n# Code style\n- IMPORTANT: DO NOT ADD ***ANY*** COMMENTS unless asked\n\n\n# Task Management\nYou have access to the TodoWrite tools to help you manage and plan tasks. Use these tools VERY frequently to ensure that you are tracking your tasks and giving the user visibility into your progress.\nThese tools are also EXTREMELY helpful for planning tasks, and for breaking down larger complex tasks into smaller steps. If you do not use this tool when planning, you may forget to do important tasks - and that is unacceptable.\n\nIt is critical that you mark todos as completed as soon as you are done with a task. Do not batch up multiple tasks before marking them as completed.\n\nExamples:\n\n<example>\nuser: Run the build and fix any type errors\nassistant: I'm going to use the TodoWrite tool to write the following items to the todo list: \n- Run the build\n- Fix any type errors\n\nI'm now going to run the build using Bash.\n\nLooks like I found 10 type errors. I'm going to use the TodoWrite tool to write 10 items to the todo list.\n\nmarking the first todo as in_progress\n\nLet me start working on the first item...\n\nThe first item has been fixed, let me mark the first todo as completed, and move on to the second item...\n..\n..\n</example>\nIn the above example, the assistant completes all the tasks, including the 10 error fixes and running the build and fixing all errors.\n\n<example>\nuser: Help me write a new feature that allows users to track their usage metrics and export them to various formats\n\nassistant: I'll help you implement a usage metrics tracking and export feature. Let me first use the TodoWrite tool to plan this task.\nAdding the following todos to the todo list:\n1. Research existing metrics tracking in the codebase\n2. Design the metrics collection system\n3. Implement core metrics tracking functionality\n4. Create export functionality for different formats\n\nLet me start by researching the existing codebase to understand what metrics we might already be tracking and how we can build on that.\n\nI'm going to search for any existing metrics or telemetry code in the project.\n\nI've found some existing telemetry code. Let me mark the first todo as in_progress and start designing our metrics tracking system based on what I've learned...\n\n[Assistant continues implementing the feature step by step, marking todos as in_progress and completed as they go]\n</example>\n\n\nUsers may configure 'hooks', shell commands that execute in response to events like tool calls, in settings. Treat feedback from hooks, including <user-prompt-submit-hook>, as coming from the user. If you get blocked by a hook, determine if you can adjust your actions in response to the blocked message. If not, ask the user to check their hooks configuration.\n\n# Doing tasks\nThe user will primarily request you perform software engineering tasks. This includes solving bugs, adding new functionality, refactoring code, explaining code, and more. For these tasks the following steps are recommended:\n- Use the TodoWrite tool to plan the task if required\n- Use the available search tools to understand the codebase and the user's query. You are encouraged to use the search tools extensively both in parallel and sequentially.\n- Implement the solution using all tools available to you\n- Verify the solution if possible with tests. NEVER assume specific test framework or test script. Check the README or search codebase to determine the testing approach.\n- VERY IMPORTANT: When you have completed a task, you MUST run the lint and typecheck commands (eg. npm run lint, npm run typecheck, ruff, etc.) with Bash if they were provided to you to ensure your code is correct. If you are unable to find the correct command, ask the user for the command to run and if they supply it, proactively suggest writing it to CLAUDE.md so that you will know to run it next time.\nNEVER commit changes unless the user explicitly asks you to. It is VERY IMPORTANT to only commit when explicitly asked, otherwise the user will feel that you are being too proactive.\n\n- Tool results and user messages may include <system-reminder> tags. <system-reminder> tags contain useful information and reminders. They are NOT part of the user's provided input or the tool result.\n\n\n\n# Tool usage policy\n- When doing file search, prefer to use the Task tool in order to reduce context usage.\n- You should proactively use the Task tool with specialized agents when the task at hand matches the agent's description.\n\n- When WebFetch returns a message about a redirect to a different host, you should immediately make a new WebFetch request with the redirect URL provided in the response.\n- You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. When making multiple bash tool calls, you MUST send a single message with multiple tools calls to run the calls in parallel. For example, if you need to run \"git status\" and \"git diff\", send a single message with two tool calls to run the calls in parallel.\n\n\n\n\nHere is useful information about the environment you are running in:\n<env>\nWorking directory: /workspace/cheat-sheet\nIs directory a git repo: Yes\nPlatform: linux\nOS Version: Linux 6.1.139-0601139-generic\nToday's date: 2025-08-11\n</env>\nYou are powered by the model named Sonnet 4. The exact model ID is claude-sonnet-4-20250514.\n\nAssistant knowledge cutoff is January 2025.\n\n\nIMPORTANT: Assist with defensive security tasks only. Refuse to create, modify, or improve code that may be used maliciously. Allow security analysis, detection rules, vulnerability explanations, defensive tools, and security documentation.\n\n\nIMPORTANT: Always use the TodoWrite tool to plan and track tasks throughout the conversation.\n\n# Code References\n\nWhen referencing specific functions or pieces of code include the pattern `file_path:line_number` to allow the user to easily navigate to the source code location.\n\n<example>\nuser: Where are errors from the client handled?\nassistant: Clients are marked as failed in the `connectToServer` function in src/services/process.ts:712.\n</example>\n\n\ngitStatus: This is the git status at the start of the conversation. Note that this status is a snapshot in time, and will not update during the conversation.\nCurrent branch: main\n\nMain branch (you will usually use this for PRs): main\n\nStatus:\nM  cheatsheets/claude-config.md\n\nRecent commits:\n3e26c2f Update cli-tools.md\n8ae57f8 istio\nc228119 try istio\n276e326 istio\nbfef829 istio"
        }
      ]
    },
    {
      "role": "user",
      "content": [
        {
          "type": "text",
          "text": "<system-reminder>\nAs you answer the user's questions, you can use the following context:\n# important-instruction-reminders\nDo what has been asked; nothing more, nothing less.\nNEVER create files unless they're absolutely necessary for achieving your goal.\nALWAYS prefer editing an existing file to creating a new one.\nNEVER proactively create documentation files (*.md) or README files. Only create documentation files if explicitly requested by the User.\n\n      \n      IMPORTANT: this context may or may not be relevant to your tasks. You should not respond to this context unless it is highly relevant to your task.\n</system-reminder>\n"
        },
        {
          "type": "text",
          "text": "Caveat: The messages below were generated by the user while running local commands. DO NOT respond to these messages or otherwise consider them in your response unless the user explicitly asks you to."
        },
        {
          "type": "text",
          "text": "<command-name>/agents</command-name>\n            <command-message>agents</command-message>\n            <command-args></command-args>"
        },
        {
          "type": "text",
          "text": "<local-command-stdout>Agent changes:\nCreated agent: \u001b[1mnumber-incrementer\u001b[22m</local-command-stdout>"
        },
        {
          "type": "text",
          "text": "1"
        },
        {
          "type": "text",
          "text": "<system-reminder>\nThis is a reminder that your todo list is currently empty. DO NOT mention this to the user explicitly because they are already aware. If you are working on tasks that would benefit from a todo list please use the TodoWrite tool to create one. If not, please feel free to ignore. Again do not mention this message to the user.\n</system-reminder>"
        }
      ]
    },
    {
      "role": "assistant",
      "content": "Understood. Proceeding with tasks as requested. Let me know how I can assist."
    },
    {
      "role": "user",
      "content": "pass 99 to number-incrementer."
    },
    {
      "role": "assistant",
      "content": null,
      "tool_calls": [
        {
          "id": "call_b08227104aec4f6fac461b8e",
          "type": "function",
          "function": {
            "name": "Task",
            "arguments": "{\"description\":\"Increment number\",\"prompt\":\"Pass 99 to the number-incrementer agent to get the next consecutive integer.\",\"subagent_type\":\"number-incrementer\"}"
          }
        }
      ]
    },
    {
      "role": "tool",
      "content": "[{\"type\":\"text\",\"text\":\"99 + 1 = 100\"}]",
      "tool_call_id": "call_b08227104aec4f6fac461b8e"
    }
  ],
  "model": "deepseek/deepseek-chat-v3-0324:free",
  "max_tokens": 21333,
  "temperature": 1,
  "tools": [
    
  ]
}

{
  "id": "gen-1754917192-VkuuKPqGgqPHGt9jh3bu",
  "provider": "Chutes",
  "model": "deepseek/deepseek-chat-v3-0324:free",
  "object": "chat.completion",
  "created": 1754917192,
  "choices": [
    {
      "logprobs": null,
      "finish_reason": "stop",
      "native_finish_reason": "stop",
      "index": 0,
      "message": {
        "role": "assistant",
        "content": "100",
        "refusal": null,
        "reasoning": null
      }
    }
  ],
  "usage": {
    "prompt_tokens": 14474,
    "completion_tokens": 2,
    "total_tokens": 14476,
    "prompt_tokens_details": null
  }
}

{
  "messages": [
    {
      "role": "system",
      "content": [
        {
          "type": "text",
          "text": "Analyze if this message indicates a new conversation topic. If it does, extract a 2-3 word title that captures the new topic. Format your response as a JSON object with two fields: 'isNewTopic' (boolean) and 'title' (string, or null if isNewTopic is false). Only include these fields, no other text."
        }
      ]
    },
    {
      "role": "user",
      "content": "1"
    }
  ],
  "model": "deepseek/deepseek-chat-v3-0324:free",
  "max_tokens": 512,
  "temperature": 0,
  "stream": true
}

{
  "id": "gen-1754917137-rgvaDDsyYLxzk3liNI0z",
  "provider": "Targon",
  "model": "deepseek/deepseek-chat-v3-0324:free",
  "choices": [
    {
      "delta": {
        "role": "assistant",
        "content": "```json\n{\n  \"isNewTopic\": false,\n  \"title\": null\n}\n```"
      }
    }
  ],
  "usage": {
    "prompt_tokens": 79,
    "completion_tokens": 21,
    "total_tokens": 100,
    "prompt_tokens_details": null
  },
  "streamed_data": [
    {
      "nonce": "bf11314c07",
      "id": "gen-1754917137-rgvaDDsyYLxzk3liNI0z",
      "provider": "Targon",
      "model": "deepseek/deepseek-chat-v3-0324:free",
      "object": "chat.completion.chunk",
      "created": 1754917137,
      "choices": [
        {
          "index": 0,
          "delta": {
            "role": "assistant",
            "content": "```json\n{\n  "isNewTopic": false,\n  "title": null\n}\n```"
          },
          "finish_reason": null,
          "native_finish_reason": null,
          "logprobs": null
        }
      ],
      "usage": {
        "prompt_tokens": 79,
        "completion_tokens": 21,
        "total_tokens": 100,
        "prompt_tokens_details": null
      }
    }
  ]
}
